package views

import (
	"github.com/sprungknoedl/dagobert/app/model"
	"github.com/sprungknoedl/dagobert/pkg/fp"
	"github.com/sprungknoedl/dagobert/pkg/valid"
)

templ MalwareMany(env Env, rows []model.Malware) {
	{{ summary := summarizeMalware(rows) }}
	@layout() {
		@list(env, "Malware/Tools") {
			<div class="stats w-full mb-4">
				for _, status := range env.Enums.MalwareStatus {
					@stat(status.State, status.Icon, status.Name, summary[status.Name])
				}
			</div>
			<table class="table table-default" data-default-sort="value-1">
				<thead>
					<tr>
						<th data-sort="value-0" class="sort px-3 py-4 text-left">Status</th>
						<th data-sort="value-1" class="sort px-3 py-4 text-left">Path</th>
						<th data-sort="value-2" class="sort px-3 py-4 text-left">Hash</th>
						<th data-sort="value-3" class="sort px-3 py-4 text-left">Source</th>
						<th data-sort="value-4" class="sort px-3 py-4 text-left">Notes</th>
						<th style="width: 7rem"></th>
					</tr>
				</thead>
				<tbody class="values">
					for _, row := range rows {
						<tr class="hover">
							<td class="value-0 truncate" data-search={ row.Status }>
								@enum(env.Enums.MalwareStatus, row.Status)
							</td>
							<td class="value-1" data-search={ row.Path }>{ row.Path } </td>
							<td class="value-2" data-search={ row.Hash }>{ row.Hash } </td>
							<td class="value-3 truncate" data-search={ row.Asset.Name }>
								if row.Asset.ID != "" {
									@enumIcon(env.Enums.AssetTypes, row.Asset.Type)
									{ row.Asset.Name }
								} else {
									-
								}
							</td>
							<td class="value-4" data-search={ row.Notes }>{ row.Notes } </td>
							<td class="text-right">
								<div class="join">
									if row.Hash != "" {
										@externalBtn("https://www.virustotal.com/gui/search/"+row.Hash, "VT")
										@externalBtn("https://www.hybrid-analysis.com/search?query="+row.Hash, "HA")
									}
									@defaultActionBtns(env, env.Route+row.ID)
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	}
}

templ MalwareOne(env Env, obj model.Malware, assets []model.Asset, vr valid.ValidationError) {
	{{ uri := "/cases/" + obj.CaseID + "/malware/" + obj.ID }}
	{{ title := fp.If(obj.ID == "new", "Add malware / tool", "Edit malware / tool") }}
	@form(env, uri, title) {
		@hiddenField("ID", obj.ID)
		@hiddenField("CaseID", obj.CaseID)
		@selectField("Status", obj.Status, env.Enums.MalwareStatus, required(), withLabel("Status"), withError(vr["Status"]))
		<div class="form-control mb-2">
			<label class="label justify-start gap-2">
				Source
				@requiredLabel()
				@validationError(vr["Time"])
			</label>
			<select name="Asset.ID" class="choices select w-full">
				<option value="">-</option>
				for _, asset := range assets {
					<option value={ asset.ID } selected?={ asset.ID == obj.AssetID }>{ asset.Name }</option>
				}
			</select>
		</div>
		@stringField("Path", obj.Path, required(), withLabel("Path"), withError(vr["Path"]))
		@stringField("Hash", obj.Hash, withLabel("Hash"), withError(vr["Hash"]))
		@textareaField("Notes", obj.Notes, withLabel("Notes"), withError(vr["Notes"]))
		<div class="form-control mb-2">
			<label class="label cursor-pointer justify-start gap-2">
				<input name="PushPathIOC" value="true" type="checkbox" class="checkbox"/>
				Push <em>Path</em> to indicators
			</label>
			<label class="label cursor-pointer justify-start gap-2 ml-4">
				<input name="PushHashIOC" value="true" type="checkbox" class="checkbox"/>
				Push <em>Hash</em> to indicators
			</label>
		</div>
		<p class="text-sm">Fields marked with <span class="text-neutral">*</span> are required.</p>
	}
}

func summarizeMalware(rows []model.Malware) map[string]int {
	summary := map[string]int{}
	for _, row := range rows {
		summary[row.Status]++
	}
	return summary
}
