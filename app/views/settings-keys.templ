package views

import (
	"github.com/sprungknoedl/dagobert/app/model"
	"github.com/sprungknoedl/dagobert/app/worker"
	"github.com/sprungknoedl/dagobert/pkg/fp"
	"github.com/sprungknoedl/dagobert/pkg/valid"
)

templ SettingsKeyMany(env Env, keys []model.Key, workers []worker.Worker) {
	@layout() {
		@list(env, "API Keys", navSettings(), navHideExport(), navHideImport()) {
			<h2 class="text-primary text-xl font-bold p-2">Keys</h2>
			<table class="table table-default dataTable" data-order='[[ 1, "asc" ]]'>
				<thead>
					<tr>
						<th class="px-3 py-4 text-left dt-orderable-asc dt-orderable-desc">Type</th>
						<th class="px-3 py-4 text-left dt-orderable-asc dt-orderable-desc">Name</th>
						<th class="px-3 py-4 text-left dt-orderable-asc dt-orderable-desc">Key</th>
						<th style="width: 7rem"></th>
					</tr>
				</thead>
				<tbody>
					for _, key := range keys {
						<tr class="hover">
							<td class="truncate">
								@enum(env.Enums.KeyTypes, key.Type)
							</td>
							<td>{ key.Name } </td>
							<td>{ key.Key } </td>
							<td class="text-right">
								<div class="join">
									@defaultActionBtns(env, env.Route+key.Key)
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
			<!-- ======= -->
			<h2 class="text-primary text-xl font-bold p-2 mt-6">Workers</h2>
			<table class="table table-default dataTable" data-order='[[ 0, "asc" ]]'>
				<thead>
					<tr>
						<th class="px-3 py-4 text-left dt-orderable-asc dt-orderable-desc">ID</th>
						<th class="px-3 py-4 text-left dt-orderable-asc dt-orderable-desc">Remote Addr</th>
						<th class="px-3 py-4 text-left dt-orderable-asc dt-orderable-desc">Modules</th>
						<th class="px-3 py-4 text-left dt-orderable-asc dt-orderable-desc"># Workers</th>
					</tr>
				</thead>
				<tbody>
					for _, worker := range workers {
						<tr class="hover">
							<td>{ worker.WorkerID } </td>
							<td>{ worker.RemoteAddr } </td>
							<td>
								<ul>
									for _, module := range worker.Modules {
										<li>{ module }</li>
									}
								</ul>
							</td>
							<td class="truncate">{ worker.Workers } </td>
						</tr>
					}
				</tbody>
			</table>
		}
	}
}

templ SettingsKeysOne(env Env, obj model.Key, vr valid.Result) {
	{{ uri := "/settings/api-keys/" + obj.Key }}
	{{ title := fp.If(obj.Key == "new", "Add API key", "Edit API key") }}
	@form(uri, title) {
		@hiddenField("Key", obj.Key)
		@selectField("Type", obj.Type, env.Enums.KeyTypes, required(), withLabel("Type"), withError(vr["Type"]))
		@stringField("Name", obj.Name, required(), withLabel("Name"), withError(vr["Name"]))
		<p class="text-sm">Fields marked with <span class="text-neutral">*</span> are required.</p>
	}
}
