package views

import (
	"github.com/sprungknoedl/dagobert/app/model"
	"github.com/sprungknoedl/dagobert/app/worker"
	"github.com/sprungknoedl/dagobert/pkg/fp"
	"github.com/sprungknoedl/dagobert/pkg/valid"
)

templ SettingsHooksMany(env Env, rows []model.Hook) {
	@layout() {
		@list(env, "Hooks", navSettings(), navHideExport(), navHideImport()) {
			<table class="table table-default" data-default-sort="value-1">
				<thead>
					<tr>
						<th data-sort="value-0" class="sort px-3 py-4 text-left">Enabled</th>
						<th data-sort="value-1" class="sort px-3 py-4 text-left">Trigger</th>
						<th data-sort="value-2" class="sort px-3 py-4 text-left">Name</th>
						<th data-sort="value-3" class="sort px-3 py-4 text-left">Condition</th>
						<th data-sort="value-4" class="sort px-3 py-4 text-left">Module</th>
						<th style="width: 7rem"></th>
					</tr>
				</thead>
				<tbody class="values">
					for _, row := range rows {
						<tr class="hover">
							<td class="value-0" data-search={ fp.If(row.Enabled, "Enabled", "Disabled") }>
								if row.Enabled {
									<div class="text-success"><i class="hio hio-5 hio-check inline-block"></i> Enabled</div>
								} else {
									<div class="text-error"><i class="hio hio-5 hio-x-mark inline-block"></i> Disabled</div>
								}
							</td>
							<td class="value-1" data-search={ row.Trigger }>{ row.Trigger } </td>
							<td class="value-2" data-search={ row.Name }>{ row.Name } </td>
							<td class="value-3" data-search={ row.Condition }>{ row.Condition } </td>
							<td class="value-4" data-search={ row.Mod }>{ row.Mod } </td>
							<td class="text-right">
								<div class="join">
									@defaultActionBtns(env, env.Route+row.ID)
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	}
}

templ SettingsHooksOne(env Env, obj model.Hook, mods []worker.Module, vr valid.ValidationError) {
	{{ uri := "/settings/hooks/" + obj.ID }}
	{{ title := fp.If(obj.ID == "new", "Add automation rule", "Edit automation rule") }}
	@form(env, uri, title) {
		@hiddenField("ID", obj.ID)
		@selectField("Trigger", obj.Trigger, env.Enums.HookTrigger, required(), withLabel("Trigger"), withError(vr["Trigger"]))
		@stringField("Name", obj.Name, required(), withLabel("Name"), withError(vr["Name"]))
		@stringField("Condition", obj.Condition, required(), withLabel("Condition"), withError(vr["Condition"]))
		<!-- TODO: explain condition language -->
		{{ modenum := fp.Apply(mods, func(m worker.Module) model.Enum { return model.Enum{Name: m.Name} }) }}
		@selectField("Mod", obj.Mod, modenum, required(), withLabel("Mod"), withError(vr["Mod"]))
		@booleanField("Enabled", obj.Enabled, withLabel("Enabled"), withError(vr["Enabled"]))
		<p class="text-sm">Fields marked with <span class="text-neutral">*</span> are required.</p>
	}
}
