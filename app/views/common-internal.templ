package views

import (
	"github.com/sprungknoedl/dagobert/app/model"
	"github.com/sprungknoedl/dagobert/pkg/fp"
)

type navbarConfig struct {
	preTitle    templ.Component
	preButtons  templ.Component
	hideImport  bool
	hideExport  bool
	hideRefresh bool
	hideAdd     bool
	hideSearch  bool
}

type navbarOption func(*navbarConfig)

func applynavOptions(opts []navbarOption) navbarConfig {
	cfg := navbarConfig{}
	for _, opt := range opts {
		opt(&cfg)
	}
	return cfg
}

func navPreTitle(c templ.Component) navbarOption {
	return func(nc *navbarConfig) { nc.preTitle = c }
}
func navPreButtons(c templ.Component) navbarOption {
	return func(nc *navbarConfig) { nc.preButtons = c }
}

func navHideImport() navbarOption  { return func(nc *navbarConfig) { nc.hideImport = true } }
func navHideExport() navbarOption  { return func(nc *navbarConfig) { nc.hideExport = true } }
func navHideRefresh() navbarOption { return func(nc *navbarConfig) { nc.hideRefresh = true } }
func navHideAdd() navbarOption     { return func(nc *navbarConfig) { nc.hideAdd = true } }
func navHideSearch() navbarOption  { return func(nc *navbarConfig) { nc.hideSearch = true } }

func navSettings() navbarOption { return navPreTitle(navSettingsTitle()) }

templ navSettingsTitle() {
	<li><i class="hio hio-6 hio-cog-6-tooth mr-2"></i> Settings</li>
}

templ navbar(env Env, title string, opts ...navbarOption) {
	{{ cfg := applynavOptions(opts) }}
	<nav class="navbar sticky top-0 bg-base-100 z-10 p-2 -mt-4">
		<div class="flex-none breadcrumbs font-serif text-3xl">
			<ul>
				if cfg.preTitle != nil {
					@cfg.preTitle
				}
				if env.Case.ID != "" {
					<li class="inline-flex gap-4">
						<i class="hio hio-6 hio-briefcase inline-block"></i>
						{ env.Case.Name }
					</li>
				}
				<li class="text-neutral">{ title }</li>
			</ul>
		</div>
		<div class="flex-1"></div>
		<div class="flex-none flex gap-4">
			if !cfg.hideSearch {
				<!-- search input -->
				<label class="w-96 input flex items-center gap-2">
					<input type="search" name="search" class="search grow" placeholder="Search ..."/>
					<svg class="w-6 h-6 opacity-70" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
						<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"></path>
					</svg>
				</label>
			}
			<!-- buttons -->
			<div class="join" role="group">
				if cfg.preButtons != nil {
					@cfg.preButtons
				}
				if uri, ok := env.Allowed("POST", env.Route+"import/csv"); ok && !cfg.hideImport {
					<a class="join-item btn" href={ uri } up-layer="new drawer" up-accept-location={ env.Route }>
						<i class="hio hio-6 hio-bars-arrow-up inline-block mr-1"></i> Import
					</a>
				}
				if uri, ok := env.Allowed("GET", env.Route+"export/csv"); ok && !cfg.hideExport {
					<a class="join-item btn" href={ uri }>
						<i class="hio hio-6 hio-bars-arrow-down inline-block mr-1"></i> Export
					</a>
				}
				if uri, ok := env.Allowed("GET", env.Route); ok && !cfg.hideRefresh {
					<a class="join-item btn" href={ uri } up-target="#list">
						<i class="hio hio-6 hio-arrow-path inline-block mr-1"></i> Refresh
					</a>
				}
				if uri, ok := env.Allowed("POST", env.Route+"new"); ok && !cfg.hideAdd {
					<a class="join-item btn btn-neutral" href={ uri } up-layer="new drawer" up-accept-location={ env.Route }>
						<i class="hio hio-6 hio-plus inline-block mr-1"></i> Add
					</a>
				}
			</div>
		</div>
	</nav>
}

templ sidebarLink(url string, title string, icon string, page string) {
	<li><a href={ url } title={ title } class={ fp.If(title == page, "menu-active", "") }><i class={ "hio hio-6 hio-" + icon }></i> </a></li>
}

templ sidebar(env Env, title string) {
	<aside class="flex flex-col h-screen fixed z-1 bg-base-100">
		<div class="m-4 mx-auto text-neutral text-center text-xl font-serif">
			[d]
		</div>
		<div class="divider"></div>
		<ul class="menu gap-2">
			@sidebarLink("/", "Cases", "briefcase", title)
		</ul>
		if env.Case.ID != "" {
			<div class="divider"></div>
			<ul class="menu gap-2">
				@sidebarLink("/cases/"+env.Case.ID+"/summary/", "Summary", "home-modern", title)
				@sidebarLink("/cases/"+env.Case.ID+"/events/", "Timeline", "clock", title)
				@sidebarLink("/cases/"+env.Case.ID+"/assets/", "Assets", "computer-desktop", title)
				@sidebarLink("/cases/"+env.Case.ID+"/malware/", "Malware/Tools", "bug-ant", title)
				@sidebarLink("/cases/"+env.Case.ID+"/indicators/", "Indicators", "finger-print", title)
				@sidebarLink("/cases/"+env.Case.ID+"/evidences/", "Evidences", "cube", title)
				@sidebarLink("/cases/"+env.Case.ID+"/tasks/", "Tasks", "clipboard-document-check", title)
				@sidebarLink("/cases/"+env.Case.ID+"/notes/", "Notes", "chat-bubble-left", title)
			</ul>
			<div class="divider"></div>
			<ul class="menu gap-2">
				@sidebarLink("/cases/"+env.Case.ID+"/vis/network", "Lateral Movement", "presentation-chart-line", title)
				@sidebarLink("/cases/"+env.Case.ID+"/vis/timeline", "Visual Timeline", "presentation-chart-bar", title)
				<li><a href={ "/cases/" + env.Case.ID + "/reports" } title="Report" class="" up-layer="new drawer"><i class="hio hio-6 hio-document-arrow-down"></i> </a></li>
			</ul>
		}
		<div class="grow"></div>
		<div class="divider"></div>
		<ul class="menu gap-2">
			<li class="dropdown dropdown-right dropdown-end">
				<div tabindex="42" role="button"><i class="hio hio-6 hio-cog-6-tooth"></i></div>
				<ul tabindex="42" class="dropdown-content menu bg-base-200 rounded-box z-2 w-52 p-2 shadow">
					<li><a href="/settings/hooks/"><i class="hio hio-6 hio-bolt"></i> Automation Rules</a></li>
					<li><a href="/settings/api-keys/"><i class="hio hio-6 hio-beaker"></i> API Keys</a></li>
					<li><a href="/settings/enums/"><i class="hio hio-6 hio-briefcase"></i> Case Objects</a></li>
					<li><a href="/settings/reports/"><i class="hio hio-6 hio-document-arrow-down"></i> Report Templates</a></li>
					<li><a href="/settings/users/"><i class="hio hio-6 hio-users"></i> Users</a></li>
				</ul>
			</li>
			<li><a href="/auth/changepassword" title="Change password" class="" up-layer="new drawer"><i class="hio hio-6 hio-key"></i> </a></li>
			<li><a href="/auth/logout" title="Logout" class=""><i class="hio hio-6 hio-arrow-right-start-on-rectangle"></i> </a></li>
		</ul>
	</aside>
}

templ formatTime(t model.Time) {
	if t.IsZero() {
		-
	} else {
		{ t.Format("2006-01-02 15:04:05") } <span class="text-neutral-content">{ t.Format("Z07:00") }</span>
	}
}

templ actionBtn(env Env, method, url string) {
	if _, ok := env.Allowed(method, url); ok {
		<a class="join-item btn btn-sm" href={ url } up-method={ method } up-layer="new drawer" up-accept-location={ env.Route }>
			{ children... }
		</a>
	}
}

templ externalBtn(url string, label string) {
	<a class="join-item btn btn-sm" href={ url } target="_blank">
		{ label }
		{ children... }
	</a>
}

templ defaultActionBtns(env Env, url string) {
	@actionBtn(env, "GET", url) {
		<i class="hio hio-5 hio-pencil"></i>
	}
	@actionBtn(env, "DELETE", url) {
		<i class="hio hio-5 hio-trash"></i>
	}
}

templ enum(list []model.Enum, value string) {
	for _, x := range list {
		if x.Name == value {
			<span class={ "flex gap-2" + fp.If(x.State != "", " text-"+x.State, "") }>
				if x.Icon != "" {
					<i class={ "hio hio-5 " + x.Icon } title={ x.Name }></i>
				}
				{ x.Name }
			</span>
		}
	}
}

templ enumIcon(list []model.Enum, value string) {
	for _, x := range list {
		if x.Name == value {
			<span class={ "flex gap-2" + fp.If(x.State != "", " text-"+x.State, "") }>
				if x.Icon != "" {
					<i class={ "hio hio-5 " + x.Icon } title={ x.Name }></i>
				}
				{ children... }
			</span>
		}
	}
}

templ layout() {
	<!DOCTYPE html>
	<html lang="en" data-theme="cupcake">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>Dagobert</title>
			<link href="/public/assets/dagobert.css" rel="stylesheet"/>
			<script src="/public/assets/list-2.3.1.min.js" defer></script>
			<script src="/public/assets/choices-11.1.0.min.js" defer></script>
			<script src="/public/assets/unpoly-3.10.2.min.js" defer></script>
			<script src="/public/assets/dagobert.js" defer></script>
		</head>
		<body>
			{ children... }
		</body>
	</html>
}

templ list(env Env, title string, opts ...navbarOption) {
	<div class="drawer-content flex">
		<section id="errors"></section>
		@sidebar(env, title)
		<main class="pl-20 p-4 grow max-w-full">
			@navbar(env, title, opts...)
			<div id="list">
				{ children... }
			</div>
		</main>
	</div>
}
