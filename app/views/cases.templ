package views

import (
	"github.com/sprungknoedl/dagobert/app/model"
	"github.com/sprungknoedl/dagobert/pkg/fp"
	"github.com/sprungknoedl/dagobert/pkg/timesketch"
	"github.com/sprungknoedl/dagobert/pkg/valid"
	"strconv"
)

templ CasesMany(env Env, rows []model.Case) {
	@layout() {
		@list(env, "Cases") {
			<table class="table table-default" data-default-sort="value-1">
				<thead>
					<tr>
						<th data-sort="value-0" class="sort px-3 py-4 text-left">ID</th>
						<th data-sort="value-1" class="sort px-3 py-4 text-left">Name</th>
						<th data-sort="value-2" class="sort px-3 py-4 text-left">Classification</th>
						<th data-sort="value-3" class="sort px-3 py-4 text-left">Severity</th>
						<th data-sort="value-4" class="sort px-3 py-4 text-left">Outcome</th>
						<th style="width: 7rem"></th>
					</tr>
				</thead>
				<tbody class="values">
					for _, row := range rows {
						if url, ok := env.Allowed("GET", env.Route+row.ID+"/summary/"); ok {
							<tr class="hover">
								<td class="value-0" data-search={ row.ID }><a class="link" href={ url }>{ row.ID }</a> </td>
								<td class="value-1" data-search={ row.Name }><a class="link" href={ url }>{ row.Name }</a> </td>
								<td class="value-2" data-search={ row.Classification }>{ row.Classification } </td>
								<td class="value-3" data-search={ row.Severity }>
									@enum(env.Enums.CaseSeverities, row.Severity)
								</td>
								<td class="value-4" data-search={ row.Outcome }>
									@enum(env.Enums.CaseOutcomes, row.Outcome)
								</td>
								<td class="text-right">
									<div class="join">
										@actionBtn(env, "GET", env.Route+row.ID+"/acl") {
											ACL 
										}
										@defaultActionBtns(env, env.Route+row.ID)
									</div>
								</td>
							</tr>
						}
					}
				</tbody>
			</table>
		}
	}
}

templ CasesOne(env Env, obj model.Case, sketches []timesketch.Sketch, vr valid.Result) {
	{{ uri := "/cases/" + obj.ID }}
	{{ title := fp.If(obj.ID == "new", "Add case", "Edit case") }}
	@form(uri, title) {
		@hiddenField("ID", obj.ID)
		@stringField("Name", obj.Name, required(), withLabel("Name"), withError(vr["Name"]))
		@stringField("Classification", obj.Classification, withLabel("Classification"), withError(vr["Classification"]))
		@selectField("Severity", obj.Severity, env.Enums.CaseSeverities, withLabel("Severity"), withError(vr["Severity"]))
		@selectField("Outcome", obj.Outcome, env.Enums.CaseOutcomes, withLabel("Outcome"), withError(vr["Outcome"]))
		@booleanField("Closed", obj.Closed, withLabel("Closed"))
		<!-- x -->
		<h2 class="text-xl font-serif mb-2 mt-4">Summary</h2>
		@textareaField("SummaryWho", obj.SummaryWho, withLabel("Who?"), withError(vr["SummaryWho"]))
		@textareaField("SummaryWhat", obj.SummaryWhat, withLabel("What?"), withError(vr["SummaryWhat"]))
		@textareaField("SummaryWhen", obj.SummaryWhen, withLabel("When?"), withError(vr["SummaryWhen"]))
		@textareaField("SummaryWhere", obj.SummaryWhere, withLabel("Where?"), withError(vr["SummaryWhere"]))
		@textareaField("SummaryWhy", obj.SummaryWhy, withLabel("Why?"), withError(vr["SummaryWhy"]))
		@textareaField("SummaryHow", obj.SummaryHow, withLabel("How?"), withError(vr["SummaryHow"]))
		<!-- x -->
		<h2 class="text-xl font-serif mb-2 mt-4">Integrations</h2>
		<div class="form-control mb-2">
			<label class="label justify-start gap-2">
				Timesketch Sketch
				@validationError(vr["SketchID"])
			</label>
			<select name="SketchID" class="select w-full">
				for _, e := range sketches {
					<option value={ e.ID } selected?={ e.ID == obj.SketchID }>{ strconv.Itoa(e.ID) } - { e.Name }</option>
				}
			</select>
		</div>
		<!-- x -->
		<p class="text-sm">Fields marked with <span class="text-neutral">*</span> are required.</p>
	}
}

templ CasesSummary(env Env, obj model.Case, events []model.Event, assets []model.Asset, indicators []model.Indicator) {
	{{ summary := summarizeAssets(assets) }}
	{{ keyEvents := fp.Filter(events, func(e model.Event) bool { return e.Flagged }) }}
	@layout() {
		@list(env, "Summary", navHideSearch(), navHideAdd(), navHideExport(), navHideImport(), navPreButtons(caseSummaryExtra(env))) {
			<h2 class="text-xl font-serif p-2">Assets</h2>
			<div class="stats w-full">
				for _, status := range env.Enums.AssetStatus {
					@stat(status.State, status.Icon, status.Name, summary[status.Name])
				}
			</div>
			<h2 class="text-xl font-serif p-2 mt-6">Summary</h2>
			<div class="grid grid-cols-3 gap-4">
				@card("Who?", obj.SummaryWho)
				@card("What?", obj.SummaryWhat)
				@card("When?", obj.SummaryWhen)
				@card("Where?", obj.SummaryWhere)
				@card("Why?", obj.SummaryWhy)
				@card("How?", obj.SummaryHow)
			</div>
			<h2 class="text-xl font-serif p-2 mt-6">Key Events</h2>
			<ul class="timeline timeline-vertical">
				for _, ev := range keyEvents {
					<li>
						<div class="timeline-start">
							@formatTime(ev.Time)
						</div>
						<div class="timeline-middle">
							@enumIcon(env.Enums.EventTypes, ev.Type)
						</div>
						<div class="timeline-end timeline-box">
							@highlightEvent(ev, assets, indicators)
						</div>
						<hr/>
					</li>
				}
				if len(keyEvents) == 0 {
					<li>
						<div class="timeline-end timeline-box">No key events selected</div>
					</li>
				}
			</ul>
		}
	}
}

func summarizeAssets(rows []model.Asset) map[string]int {
	summary := map[string]int{}
	for _, row := range rows {
		summary[row.Status]++
	}
	return summary
}

templ stat(status, icon, title string, value int) {
	<div class="stat">
		<div class={ "stat-figure " + fp.If(status != "", " text-"+status, "") }><i class={ "hio " + icon } style="font-size: 2rem;"></i></div>
		<div class="stat-title">{ title }</div>
		<div class="stat-value">{ value }</div>
		<div class="stat-desc">&nbsp;</div>
	</div>
}

templ card(title, value string) {
	<div class="card bg-base-200">
		<div class="card-body">
			<h2 class="card-title">{ title }</h2>
			<article class="prose">
				@markdown(value)
			</article>
		</div>
	</div>
}

templ caseSummaryExtra(env Env) {
	if url, ok := env.Allowed("GET", "/cases/" + env.Case.ID + "?target=summary"); ok {
		<a class="join-item btn" href={ url } up-layer="new drawer" up-accept-location={ env.Route }>
			<i class="hio hio-6 hio-pencil inline-block mr-1"></i> Edit
		</a>
	}
}
