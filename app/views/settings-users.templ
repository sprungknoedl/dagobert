package views

import (
	"github.com/sprungknoedl/dagobert/app/model"
	"github.com/sprungknoedl/dagobert/pkg/fp"
	"github.com/sprungknoedl/dagobert/pkg/valid"
	"slices"
	"time"
)

templ SettingsUsersMany(env Env, rows []model.User) {
	@layout() {
		@list(env, "Users", navSettings(), navHideExport(), navHideImport()) {
			<table class="table table-default" data-default-sort="value-1">
				<thead>
					<tr>
						<th data-sort="value-0" class="sort px-3 py-4 text-left">ID</th>
						<th data-sort="value-1" class="sort px-3 py-4 text-left">Name</th>
						<th data-sort="value-2" class="sort px-3 py-4 text-left">UPN</th>
						<th data-sort="value-3" class="sort px-3 py-4 text-left">Email</th>
						<th data-sort="value-4" class="sort px-3 py-4 text-left">Role</th>
						<th data-sort="value-5" class="sort px-3 py-4 text-left">Last login</th>
						<th style="width: 7rem"></th>
					</tr>
				</thead>
				<tbody class="values">
					for _, row := range rows {
						<tr class="hover">
							<td class="value-0" data-search={ row.ID }>{ row.ID } </td>
							<td class="value-1" data-search={ row.Name }>{ row.Name } </td>
							<td class="value-2" data-search={ row.UPN }>{ row.UPN } </td>
							<td class="value-3" data-search={ row.Email }>{ row.Email } </td>
							<td class="value-4" data-search={ row.Role }>{ row.Role } </td>
							<td class="value-5" data-search={ row.LastLogin.Format(time.RFC3339) }>
								@formatTime(row.LastLogin)
							</td>
							<td class="text-right">
								<div class="join">
									if url, ok := env.Allowed("GET", env.Route+row.ID+"/acl"); ok && row.Role != "Administrator" {
										@actionBtn(env, "GET", url) {
											ACL
										}
									}
									@defaultActionBtns(env, env.Route+row.ID)
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	}
}

templ SettingsUsersOne(env Env, obj model.User, vr valid.ValidationError) {
	{{ uri := "/settings/users/" + obj.ID }}
	{{ title := fp.If(obj.ID == "new", "Add user", "Edit user") }}
	@form(uri, title) {
		@stringField("ID", obj.ID, required(), withLabel("ID"), withError(vr["ID"]))
		@selectField("Role", obj.Role, env.Enums.UserRoles, required(), withLabel("Role"), withError(vr["Role"]))
		@stringField("Name", obj.Name, withLabel("Name"), withError(vr["Name"]))
		<div class="form-control mb-2">
			<label class="label justify-start gap-2">
				UPN
				<span class="text-sm text-neutral-content">(Will be overwritten by identity provider.)</span>
				@validationError(vr["UPN"])
			</label>
			<input name="UPN" type="text" class="input w-full" value={ obj.UPN }/>
		</div>
		<div class="form-control mb-2">
			<label class="label justify-start gap-2">
				Email
				<span class="text-sm text-neutral-content">(Will be overwritten by identity provider.)</span>
				@validationError(vr["Email"])
			</label>
			<input name="Email" type="text" class="input w-full" value={ obj.Email }/>
		</div>
		<p class="text-sm">Fields marked with <span class="text-neutral">*</span> are required.</p>
	}
}

templ SettingsUsersACL(env Env, obj model.User, cases []model.Case, perms []string, vr valid.ValidationError) {
	{{ uri := "/settings/users/" + obj.ID + "/acl" }}
	{{ title := "Access control" }}
	@form(uri, title) {
		<p class="mb-2">User <strong>{ obj.Name } ({ obj.UPN })</strong> is allowed to access the following cases:</p>
		for _, kase := range cases {
			<div class="form-control mb-2">
				<label class="label cursor-pointer justify-start gap-2">
					<input name="Cases" value={ kase.ID } type="checkbox" class="checkbox" checked?={ slices.Contains(perms, kase.ID) }/>
					{ kase.Name }
				</label>
			</div>
		}
	}
}
