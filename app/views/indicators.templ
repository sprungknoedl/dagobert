package views

import (
	"github.com/sprungknoedl/dagobert/app/model"
	"github.com/sprungknoedl/dagobert/pkg/fp"
	"github.com/sprungknoedl/dagobert/pkg/valid"
	"time"
)

templ IndicatorsMany(env Env, rows []model.Indicator) {
	{{ summary := summarizeIndicators(rows) }}
	@layout() {
		@list(env, "Indicators", navHideImport(), navHideExport(), navPreButtons(indicatorsManyExtra(env))) {
			<div class="stats w-full mb-4">
				for _, status := range env.Enums.IndicatorStatus {
					@stat(status.State, status.Icon, status.Name, summary[status.Name])
				}
			</div>
			<table class="table table-default" data-default-sort="value-1">
				<thead>
					<tr>
						<th data-sort="value-0" class="sort px-3 py-4 text-left">Status</th>
						<th data-sort="value-1" class="sort px-3 py-4 text-left">Type</th>
						<th data-sort="value-2" class="sort px-3 py-4 text-left">Value</th>
						<th data-sort="value-3" class="sort px-3 py-4 text-left">TLP</th>
						<th data-sort="value-4" class="sort px-3 py-4 text-left">Source</th>
						<th data-sort="value-5" class="sort px-3 py-4 text-left">First seen</th>
						<th data-sort="value-6" class="sort px-3 py-4 text-left">Last seen</th>
						<th data-sort="value-7" class="sort px-3 py-4 text-left">Events</th>
						<th style="width: 7rem"></th>
					</tr>
				</thead>
				<tbody class="values">
					for _, row := range rows {
						<tr class="hover">
							<td class="value-0 truncate" data-search={ row.Status }>
								@enum(env.Enums.IndicatorStatus, row.Status)
							</td>
							<td class="value-1 truncate" data-search={ row.Type }>
								@enum(env.Enums.IndicatorTypes, row.Type)
							</td>
							<td class="value-2" data-search={ row.Value }>{ row.Value } </td>
							<td class="value-3" data-search={ row.TLP }>
								@enum(env.Enums.IndicatorTLPs, row.TLP)
							</td>
							<td class="value-4" data-search={ row.Source }>{ row.Source } </td>
							<td class="value-5 truncate" data-search={ row.FirstSeen.Format(time.RFC3339) }>
								@formatTime(row.FirstSeen)
							</td>
							<td class="value-6 truncate" data-search={ row.LastSeen.Format(time.RFC3339) }>
								@formatTime(row.LastSeen)
							</td>
							<td class="value-7" data-search={ row.Events }>{ row.Events } </td>
							<td class="text-right">
								<div class="join">
									if row.Type == "IP" && row.TLP != "TLP:RED" {
										@externalBtn("https://www.virustotal.com/gui/search/"+row.Value, "VT")
										@externalBtn("https://www.abuseipdb.com/check/"+row.Value, "AB")
									} else if row.Type == "Domain" && row.TLP != "TLP:RED" {
										@externalBtn("https://www.virustotal.com/gui/search/"+row.Value, "VT")
									} else if row.Type == "Hash" && row.TLP != "TLP:RED" {
										@externalBtn("https://www.virustotal.com/gui/search/"+row.Value, "VT")
										@externalBtn("https://www.hybrid-analysis.com/search?query="+row.Value, "HA")
									}
									@defaultActionBtns(env, env.Route+row.ID)
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	}
}

templ IndicatorsOne(env Env, obj model.Indicator, vr valid.ValidationError) {
	{{ uri := "/cases/" + obj.CaseID + "/indicators/" + obj.ID }}
	{{ title := fp.If(obj.ID == "new", "Add indicator", "Edit indicator") }}
	@form(uri, title) {
		@hiddenField("ID", obj.ID)
		@hiddenField("CaseID", obj.CaseID)
		@selectField("Status", obj.Status, env.Enums.IndicatorStatus, required(), withLabel("Status"), withError(vr["Status"]))
		@selectField("Type", obj.Type, env.Enums.IndicatorTypes, required(), withLabel("Type"), withError(vr["Type"]))
		@stringField("Value", obj.Value, required(), withLabel("Value"), withError(vr["Value"]))
		@selectField("TLP", obj.TLP, env.Enums.IndicatorTLPs, required(), withLabel("TLP"), withError(vr["TLP"]))
		@stringField("Source", obj.Source, withLabel("Source"), withError(vr["Source"]))
		@textareaField("Notes", obj.Notes, withLabel("Notes"), withError(vr["Notes"]))
		<p class="text-sm">Fields marked with <span class="text-neutral">*</span> are required.</p>
	}
}

templ indicatorsManyExtra(env Env) {
	if url, ok := env.Allowed("POST", env.Route + "import"); ok {
		<details class="dropdown">
			<summary class="btn join-item">
				<i class="hio hio-6 hio-bars-arrow-up inline-block mr-1"></i> Import
			</summary>
			<ul style="position: absolute" class="menu dropdown-content bg-base-200 rounded-box z-[1] w-52 p-2 shadow">
				<li><a href={ url + "/csv" } up-layer="new drawer" up-accept-location={ env.Route }>from CSV</a></li>
				<li><a href={ url + "/timesketch" } up-follow up-method="post">from Timesketch</a></li>
			</ul>
		</details>
	}
	if url, ok := env.Allowed("GET", env.Route + "export"); ok {
		<details class="dropdown">
			<summary class="btn join-item">
				<i class="hio hio-6 hio-bars-arrow-down inline-block mr-1"></i> Export
			</summary>
			<ul style="position: absolute" class="menu dropdown-content bg-base-200 rounded-box z-[1] w-52 p-2 shadow">
				<li><a href={ url + "/csv" }>as CSV</a></li>
				<li><a href={ url + "/ioc" }>as OpenIOC</a></li>
				<li><a href={ url + "/stix" }>as STIX</a></li>
			</ul>
		</details>
	}
}

func summarizeIndicators(rows []model.Indicator) map[string]int {
	summary := map[string]int{}
	for _, row := range rows {
		summary[row.Status]++
	}
	return summary
}
