module Dagobert.View.MalwarePage where

import Prelude

import Dagobert.Data.Asset (Asset)
import Dagobert.Data.Malware (Malware, MalwareStub, newMalware)
import Dagobert.Route (Route(..))
import Dagobert.Utils.Env (Env)
import Dagobert.Utils.Forms (Form, dummyField, form, label, poll, render, selectField, textField, textareaField, validate)
import Dagobert.Utils.HTML (modal, printDate, renderDateAdded)
import Dagobert.Utils.Validation as V
import Dagobert.Utils.XHR as XHR
import Dagobert.View.EntityPage (DialogControls, PageState, defaultActions, entityPage)
import Data.Array ((:))
import Data.Maybe (Maybe(..), maybe)
import Deku.Core (Nut)
import Deku.DOM as D
import Deku.Do as Deku
import Deku.Hooks (useHot, (<#~>))
import Effect (Effect)
import FRP.Poll (Poll)

malwarePage :: { poll ∷ Poll (PageState Malware), push ∷ PageState Malware -> Effect Unit } -> Env -> Nut
malwarePage state { kase } = Deku.do
  kase <#~> maybe mempty (\c -> entityPage
    { title: ViewMalware c.id
    , ctor: newMalware
    , id: _.id
    , csv:                        "/api/cases/" <> show c.id <> "/malware.csv"
    , fetch:          XHR.get    ("/api/cases/" <> show c.id <> "/malware")
    , create: \obj -> XHR.post   ("/api/cases/" <> show c.id <> "/malware") obj
    , update: \obj -> XHR.put    ("/api/cases/" <> show c.id <> "/malware/" <> show obj.id) obj
    , delete: \obj -> XHR.delete ("/api/cases/" <> show c.id <> "/malware/" <> show obj.id)
    , hydrate:        XHR.get    ("/api/cases/" <> show c.id <> "/asset")

    , columns: [ { title: "Date added", width: "7rem",  renderString: _.dateAdded >>> printDate, renderNut: renderDateAdded }
               , { title: "Filename",   width: "12rem", renderString: _.filename,                renderNut: _.filename >>> D.text_  }
               , { title: "Filepath",   width: "auto",  renderString: _.filepath,                renderNut: _.filepath >>> D.text_ }
               --, { title: "C Date",     width: "7rem",  renderString: _.cDate >>> printDate, renderNut: _.cDate >>> printDate >>> D.text_ }
               --, { title: "M Date",     width: "7rem",  renderString: _.mDate >>> printDate, renderNut: _.mDate >>> printDate >>> D.text_ }
               , { title: "System",     width: "8rem",  renderString: _.system,                  renderNut: _.system >>> D.text_ }
               , { title: "Hash",       width: "auto",  renderString: _.hash,                    renderNut: _.hash >>> D.text_ }
               , { title: "Notes",      width: "auto",  renderString: _.notes,                   renderNut: _.notes >>> D.text_ }
               ]

    , modal: malwareModal
    } defaultActions state)

malwareModal :: DialogControls MalwareStub -> Malware -> Array Asset -> Nut
malwareModal { save, cancel } input assets = Deku.do
  id       <- useHot input.id
  filename <- useHot input.filename
  filepath <- useHot input.filepath
  cDate    <- useHot input.cDate
  mDate    <- useHot input.mDate
  system   <- useHot input.system
  hash     <- useHot input.hash
  notes    <- useHot input.notes

  let
    formBuilder :: Form (Maybe MalwareStub)
    formBuilder = ado
      id' <- dummyField id
        # validate V.id

      filename' <- textField filename
        # validate V.required
        # label "Filename"

      filepath' <- textField filepath
        # validate V.optional
        # label "Filepath"

      cDate' <- textField cDate
        # validate (V.optional >=> V.defaultsTo "1970-01-01T00:00:00Z" >=> V.datetime)
        # label "C Date"

      mDate' <- textField mDate
        # validate (V.optional >=> V.defaultsTo "1970-01-01T00:00:00Z" >=> V.datetime)
        # label "M Date"

      system' <- selectField ("" : map _.name assets) system
        # validate V.optional
        # label "System"

      hash' <- textField hash
        # validate V.optional
        # label "Hash"

      notes' <- textareaField notes
        # validate V.optional
        # label "Notes"

      in { id: _,  filename: _,  filepath: _,  cDate: _,  mDate: _,  system: _,  hash: _,  notes: _ }
       <$> id' <*> filename' <*> filepath' <*> cDate' <*> mDate' <*> system' <*> hash' <*> notes'

    onSubmit :: Poll (Effect Unit)
    onSubmit = do
      (poll formBuilder) <#> case _ of
        Nothing -> pure unit
        Just obj -> save obj

    onReset :: Poll (Effect Unit)
    onReset =
      pure cancel

    title :: forall r. {id :: Int | r} -> String
    title {id: 0} = "Add malware"
    title {id: _} = "Edit malware"
  
  modal $ form (title input) (render formBuilder) onSubmit onReset