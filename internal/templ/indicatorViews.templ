package templ

import (
	"github.com/sprungknoedl/dagobert/internal/templ/utils"
	"github.com/sprungknoedl/dagobert/internal/templ/icons"
	"github.com/sprungknoedl/dagobert/pkg/model"
	"github.com/sprungknoedl/dagobert/pkg/valid"
)

type IndicatorDTO struct {
	ID          string
	CaseID      string
	Type        string `form:"type"`
	Value       string `form:"value"`
	TLP         string `form:"tlp"`
	Description string `form:"description"`
	Source      string `form:"source"`
}

templ IndicatorForm(env utils.Env, obj IndicatorDTO, vr valid.Result) {
	@utils.Modal("max-w-4xl") {
		<form hx-post={env.Routes("save-indicator", obj.CaseID, obj.ID)} hx-target="#modal">
		@utils.ModalHeader() {
			if obj.ID == ZeroID {
				Add indicator
			} else {
				Edit indicator
			}
		}

		@utils.ModalBody() {
			@utils.SelectInput("Type", "type", obj.Type, model.IndicatorTypes, true, vr["Type"])
			@utils.TextInput("Value", "value", obj.Value, true, vr["Value"])
			@utils.SelectInput("TLP", "tlp", obj.TLP, model.IndicatorTLPs, true, vr["TLP"])
			@utils.TextInput("Source", "source", obj.Source, false, vr["Source"])
			@utils.TextareaInput("Description", "description", obj.Description, false, vr["Description"])
		}

		@utils.DefaultCrudFooter() {}
		</form>
	}
}

templ IndicatorList(env utils.Env, cid string, list []model.Indicator) {
	@TableView(env, "Indicators", CrudUrls{
		List: env.Routes("list-indicators", cid),
		Import: env.Routes("import-indicators", cid),
		Export: env.Routes("export-indicators", cid),
		Add: env.Routes("view-indicator", cid, ZeroID),
	}) {
		@utils.TableHead() {
			@utils.TH(env, "type", templ.Attributes{"style": "width: 10rem"}) { Type  }
			@utils.TH(env, "value", templ.Attributes{"style": "width: auto"})  { Value  }
			@utils.TH(env, "desc", templ.Attributes{"style": "width: auto"})  { Description  }
			@utils.TH(env, "tlp", templ.Attributes{"style": "width: 8rem"})  { TLP  }
			@utils.TH(env, "source", templ.Attributes{"style": "width: auto"})  { Source  }
			@utils.TH(env, "", templ.Attributes{"style": "width: 7rem"})  { }
		}

		@utils.TableBody() {
			for _, obj := range list {
			@utils.TR(nil) {
				@utils.TD() {@renderIndicatorType(obj.Type)}
				@utils.TD() {{ obj.Value }}
				@utils.TD() {{ obj.Description }}
				@utils.TD() {@renderIndicatorTLP(obj.TLP)}
				@utils.TD() {{ obj.Source }}
				@utils.DefaultTableButtons(env.Routes("view-indicator", cid, obj.ID), env.Routes("delete-indicator", cid, obj.ID)) {}
			}}
		}

		if len(list) == 0 {
			@utils.EmptyCaption(env.Routes("view-indicator", cid, ZeroID)) {}
		}
	}
}

templ renderIndicatorType(value string) {
	switch value {
	case "IP":
		@icons.MapPin("inline-block w-6 h-6 mr-2")
	case "Domain":
		@icons.GlobeEurope("inline-block w-6 h-6 mr-2")
	case "URL":
		@icons.Link("inline-block w-6 h-6 mr-2")
	case "Path":
		@icons.FolderOpen("inline-block w-6 h-6 mr-2")
	case "Hash":
		@icons.Fingerprint("inline-block w-6 h-6 mr-2")
	case "Service":
		@icons.CommandLine("inline-block w-6 h-6 mr-2")
	default:
		@icons.QuestionMarkCircle("inline-block w-6 h-6 mr-2")
	}
	{value}
}

templ renderIndicatorTLP(value string) {
	switch value {
	case "TLP:RED":
		<span class="text-red-600">{value}</span>
	case "TLP:AMBER":
		<span class="text-amber-600">{value}</span>
	case "TLP:GREEN":
		<span class="text-green-600">{value}</span>
	default:
		{value}
	}
}
