package templ

import (
	"fmt"

	"github.com/sprungknoedl/dagobert/internal/templ/utils"
	"github.com/sprungknoedl/dagobert/pkg/model"
	"github.com/sprungknoedl/dagobert/internal/templ/icons"
	"github.com/sprungknoedl/dagobert/pkg/valid"
)

type EvidenceDTO struct {
	ID          string
	CaseID      string
	Type        string `form:"type"`
	Name        string `form:"name"`
	Description string `form:"description"`
}

templ EvidenceForm(env utils.Env, obj EvidenceDTO, vr valid.Result) {
	@utils.Modal("max-w-4xl") {
		<form id='form' hx-post={env.Routes("save-evidence", obj.CaseID, obj.ID)} hx-target="#modal" hx-encoding="multipart/form-data"
		x-data={fmt.Sprintf("{ filename: %q }", obj.Name)}>
		@utils.ModalHeader() {
			if obj.ID == ZeroID {
				Add evidence
			} else {
				Edit evidence
			}
		}

		@utils.ModalBody() {
			<div class="form-control mb-2">
				<label class="label"> File </label>
				<input name="file" type="file" @change="filename = Object.values($event.target.files).map(file => file.name).join(', ')" 
				class="file-input file-input-bordered w-full" />
			</div>

			<div class="form-control mb-2">
				<label class="label">
					Name <span class="font-bold text-primary">*</span>
					if vr["Name"].Missing || vr["Name"].Invalid{
						<span class="ml-2 text-sm text-error">{ vr["Name"].String() }</span>
					}
				</label>

				<input x-model="filename" name="name" value={obj.Name} type="text" class="input input-bordered" />
			</div>

			@utils.SelectInput("Type", "type", obj.Type, model.EvidenceTypes, true, vr["Type"])
			@utils.TextareaInput("Description", "description", obj.Description, false, vr["Description"])

			<div class="form-control mb-2">
				<progress id="progress" class="progress w-full" value="0" max="100"></progress>

				<script>
					htmx.on('#form', 'htmx:xhr:progress', function(evt) {
					htmx.find('#progress').setAttribute('value', (evt.detail.loaded/evt.detail.total * 100))
					});
				</script>
			</div>

		}

		@utils.DefaultCrudFooter() {}
		</form>
	}
}

templ EvidenceList(env utils.Env, cid string, list []model.Evidence) {
	@TableView(env, "Evidences", CrudUrls{
		List: env.Routes("list-evidences", cid),
		Import: env.Routes("import-evidences", cid),
		Export: env.Routes("export-evidences", cid),
		Add: env.Routes("view-evidence", cid, ZeroID),
	}) {
		@utils.TableHead() {
			@utils.TH(env, "type", templ.Attributes{"style": "width: 15rem"}) { Type }
			@utils.TH(env, "name", templ.Attributes{"style": "width: auto"})  { Name }
			@utils.TH(env, "desc", templ.Attributes{"style": "width: auto"})  { Description }
			@utils.TH(env, "hash", templ.Attributes{"style": "width: 25rem"})  { Hash }
			@utils.TH(env, "", templ.Attributes{"style": "width: 7rem"})  { }
		}

		@utils.TableBody() {
			for _, obj := range list {
			@utils.TR(nil) {
				@utils.TD() {@renderEvidenceType(obj.Type)}
				@utils.TD() {{ obj.Name }}
				@utils.TD() {{ obj.Description }}
				@utils.TD() {{ obj.Hash }}
				@utils.DefaultTableButtons(env.Routes("view-evidence", cid, obj.ID), env.Routes("delete-evidence", cid, obj.ID)) {
					@utils.InlineLink(templ.Attributes{
						"href": env.Routes("download-evidence", cid, obj.ID),
						"target": "blank",
					}) {
						@icons.ArrowDownTray("w-4 h-4") }
					}
			}}
		}

		if len(list) == 0 {
			@utils.EmptyCaption(env.Routes("view-evidence", cid, ZeroID)) {}
		}
	}
}

templ renderEvidenceType(value string) {
	switch value {
	case "File":
		@icons.FolderOpen("inline-block w-6 h-6 mr-2")
	case "Logs":
		@icons.DocumentText("inline-block w-6 h-6 mr-2")
	case "Artifacts Collection":
		@icons.ArchivBox("inline-block w-6 h-6 mr-2")
	case "System Image":
		@icons.Server("inline-block w-6 h-6 mr-2")
	case "Memory Dump":
		@icons.CpuChip("inline-block w-6 h-6 mr-2")
	default:
		@icons.QuestionMarkCircle("inline-block w-6 h-6 mr-2")
	}
	{value}
}
