package templ

import (
	"github.com/sprungknoedl/dagobert/internal/templ/utils"
    "github.com/sprungknoedl/dagobert/model"
    "github.com/sprungknoedl/dagobert/pkg/valid"
)

type MalwareDTO struct {
    ID       int64
    CaseID   int64
	Filename string `form:"filename"`
	Filepath string `form:"filepath"`
	CDate    string `form:"cDate"`
	MDate    string `form:"mDate"`
	System   string `form:"system"`
	Hash     string `form:"hash"`
	Notes    string `form:"notes"`
}

templ MalwareForm(env utils.Env, obj MalwareDTO, vr valid.Result) {
    @utils.Modal("max-w-4xl") {
        <form hx-post={env.Routes("save-malware", obj.CaseID, obj.ID)} hx-target="#modal">
        @utils.ModalHeader() {
            if obj.ID == 0 {
                Add malware
            } else {
                Edit malware
            }
        }
                
        @utils.ModalBody() {
            @utils.TextInput("System", "system", obj.System, true, vr["System"])
            @utils.TextInput("Filename", "filename", obj.Filename, true, vr["Filename"])
            @utils.TextInput("Path", "filepath", obj.Filepath, false, vr["Filepath"])
            @utils.TextInput("Create Date", "cdate", obj.CDate, false, vr["CDate"])
            @utils.TextInput("Modify Date", "mdate", obj.MDate, false, vr["MDate"])
            @utils.TextInput("Hash", "hash", obj.Hash, false, vr["Hash"])
            @utils.TextInput("Notes", "notes", obj.Notes, false, vr["Notes"])
        }

        @utils.DefaultCrudFooter() {}
        </form>
    }
}

templ MalwareList(env utils.Env, cid int64, list []model.Malware) {
    @TableView(env, "Malware", CrudUrls{
        List: env.Routes("list-malware", cid),
        Import: env.Routes("import-malware", cid),
        Export: env.Routes("export-malware", cid),
        Add: env.Routes("view-malware", cid, 0),
    }) {
        @utils.TableHead() {
            @utils.TH(env, "filename", templ.Attributes{"style": "width: 12rem"}) { Filename  }
            @utils.TH(env, "filepath", templ.Attributes{"style": "width: auto"})  { Filepath  }
            @utils.TH(env, "system", templ.Attributes{"style": "width: 8rem"})  { System  }
            @utils.TH(env, "hash", templ.Attributes{"style": "width: auto"})  { Hash  }
            @utils.TH(env, "notes", templ.Attributes{"style": "width: auto"})  { Notes  }
            @utils.TH(env, "", templ.Attributes{"style": "width: 7rem"})  { }
        }
        
        @utils.TableBody() {
            for _, obj := range list {
            @utils.TR() {
                @utils.TD() {{ obj.Filename }}
                @utils.TD() {{ obj.Filepath }}
                @utils.TD() {{ obj.System }}
                @utils.TD() {{ obj.Hash }}
                @utils.TD() {{ obj.Notes }}
                @utils.DefaultTableButtons(env.Routes("view-malware", cid, obj.ID), env.Routes("delete-malware", cid, obj.ID)) {}
            }}
        }

        if len(list) == 0 {
            @utils.EmptyCaption(env.Routes("view-malware", cid, 0)) {}
        }
    }
}