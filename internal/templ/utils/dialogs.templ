package utils

import (
    "fmt"

    "github.com/sprungknoedl/dagobert/internal/templ/icons"
	"github.com/labstack/echo/v4"
)

templ ErrorNotification(err error) {
    <div class="flex items-center w-[42rem] p-4 rounded-lg shadow text-slate-400 bg-slate-700 m-8" role="alert"
        _="on click transition opacity to 0 over 100ms then remove me">
        <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg bg-red-700 text-red-200">
            @icons.XCircleFilled("w-5 h-5")
        </div>
        <div class="ms-3 text-sm font-normal">
            <h6 class="font-bold">Unrecoverable error encountered!</h6>
            { fmt.Sprintf("%v", err.Error()) }
        </div>
    </div>
}

templ WarningNotification(err *echo.HTTPError) {
    <div class="flex items-center w-[42rem] p-4 rounded-lg shadow text-slate-400 bg-slate-700 m-8" role="alert"
        _="on click transition opacity to 0 over 100ms then remove me
           on load wait 5s then transition opacity to 0 over 250ms then remove me">
        <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg bg-amber-700 text-orange-200">
            @icons.ExclamationCircleFilled("w-5 h-5")
        </div>
        <div class="ms-3 text-sm font-normal">
            <h6 class="font-bold">Bad request.</h6>
            { fmt.Sprintf("%v", err.Message) }
        </div>
    </div>
}

templ Modal(w string) {
    <!-- Main modal -->
    <aside _="on closeModal transition opacity to 0 over 100ms then remove me
              on keydown[key is 'Escape'] from window transition opacity to 0 over 100ms then remove me
              on load set i to the first <input/> in me then call i.focus()"
        class="fixed top-0 right-0 z-40 h-screen overflow-y-auto w-1/3 bg-gray-800 border-l border-gray-600 shadow-xl">
        <!-- Modal content -->
            { children... }
    </aside>
}

templ ModalHeader() {
    <!-- Modal header -->
    <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t border-slate-600">
        <h6 class="text-sm uppercase font-semibold text-white">
            { children... }
        </h6>
        @ModalClose()
    </div>
}

templ ModalClose() {
    <button type="button" _="on click trigger closeModal" class="absolute top-3 end-2.5 text-slate-400 bg-transparent rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center hover:bg-slate-600 hover:text-white" >
        @icons.XMark("w-3 h-3")
        <span class="sr-only">Close modal</span>
    </button>
}

templ ModalBody() {
    <!-- Modal body -->
    <div class="p-4 md:p-5 space-y-4">
        { children... }
    </div>
}

templ ModalFooter() {
    <!-- Modal footer -->
    <div class="flex items-center p-4 md:p-5 border-t rounded-b border-slate-600">
        { children... }
    </div>
}

templ DefaultCrudFooter() {
    @ModalFooter() {
        @PrimaryButton(templ.Attributes{"type": "submit"}) { Save }
        @SecondaryButton(templ.Attributes{"_": "on click trigger closeModal"}) { Cancel }
        <p class="ml-4 text-sm text-slate-500">Fields marked with <span class="font-bold text-rose-500">*</span> are required.</p>
    }
}

templ Confirm(env Env, dst string) {
    @Modal("max-w-md") {
        @ModalClose() {}

        <div class="p-4 md:p-5 text-center">
            @icons.ExclamationCircle("mx-auto my-5 w-12 h-12")
            <h3 class="mb-5 text-lg font-normal text-slate-400">Are you sure you want to delete this item? This action is permanent and can not be undone.</h3>

            @DangerButton(templ.Attributes{"hx-delete": dst, "hx-swap": "none"}) { Yes, I am sure }
            @SecondaryButton(templ.Attributes{"_": "on click trigger closeModal"}) { No, cancel }
        </div>
    }
}

templ Import(env Env, dst string) {
    @Modal("max-w-4xl") {
        <form id="form" hx-post={dst} hx-encoding="multipart/form-data" hx-target="#modal">
        @ModalHeader() {
            Import from CSV
        }

        @ModalBody() {
            <p class="flex items-center gap-2">
            @icons.InformationCircle(icons.Inline)
            Please note, that dagobert will attempt to deduplicate entries.
            </p>

            <input name="file" class="block w-full text-sm border rounded-lg cursor-pointer text-slate-400 focus:outline-none bg-slate-700 border-slate-600 placeholder-slate-400" type="file" />
        }

        @ModalFooter() {
            @PrimaryButton(templ.Attributes{"type": "submit"}) { Import }
            @SecondaryButton(templ.Attributes{"_": "on click trigger closeModal"}) { Cancel }
        }
        </form>
    }
}