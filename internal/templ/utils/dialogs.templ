package utils

import (
	"fmt"

	"github.com/sprungknoedl/dagobert/internal/templ/icons"
	"github.com/labstack/echo/v4"
)

templ ErrorNotification(err error) {
	<div class="alert alert-error w-[42rem] m-4" role="alert"
		_="on click transition opacity to 0 over 100ms then remove me">
		@icons.XCircleFilled("w-8 h-8")
		<div>
			<h3 class="font-bold">Unrecoverable error encountered!</h3>
			<div class="text-xs">{ fmt.Sprintf("%v", err.Error()) }</div>
		</div>
	</div>
}

templ WarningNotification(err *echo.HTTPError) {
	<div class="alert alert-warning w-[42rem] m-4" role="alert"
		_="on click transition opacity to 0 over 100ms then remove me
		   on load wait 5s then transition opacity to 0 over 250ms then remove me">
		@icons.ExclamationCircleFilled("w-8 h-8")
		<div>
			<h3 class="font-bold">Bad request.</h3>
			<div class="text-cs">{ fmt.Sprintf("%v", err.Message) }</div>
		</div>
	</div>
}

templ Modal(_ string) {
	<!-- Main modal -->
	<div id="modal" class="drawer-side z-50" hx-swap-oob="true" @htmx:load="drawer = true" >
		<label @click="drawer = false" @keydown.escape.window="drawer = false" class="drawer-overlay"></label>
		<div class="bg-base-200 text-base-content p-4 h-full w-[42rem]">
			<!-- Modal content -->
			{ children... }
		</div>
	</div>
}

templ ModalHeader() {
	<!-- Modal header -->
	@ModalClose()
	<h3 class="font-bold text-lg mb-4">
		{ children... }
	</h3>
}

templ ModalClose() {
	<button type="button" @click="drawer = false" class="btn btn-sm btn-circle btn-ghost absolute top-3 end-3"> x </button>
}

templ ModalBody() {
	<!-- Modal body -->
	<div class="mb-4">
	{ children... }
	</div>
}

templ ModalFooter() {
	<!-- Modal footer -->
	<div class="flex gap-2 items-center">
	{ children... }
	</div>
}

templ DefaultCrudFooter() {
	@ModalFooter() {
		@PrimaryButton(templ.Attributes{"@click": "drawer = false", "type": "submit"}) { Save }
		@NeutralButton(templ.Attributes{"@click": "drawer = false"}) { Cancel }
		<p class="text-sm text-neutral">Fields marked with <span class="font-bold text-primary">*</span> are required.</p>
	}
}

templ Confirm(env Env, dst string) {
	@Modal("") {
		@ModalClose() {}

		@ModalBody() {
			@icons.ExclamationCircle("mx-auto my-5 w-12 h-12 text-error")
			<h3 class="mb-5 text-lg font-normal">Are you sure you want to delete this item? This action is permanent and can not be undone.</h3>
		}

		<div class="flex gap-2 items-center justify-center">
			@DangerButton(templ.Attributes{"@click": "drawer = false", "hx-delete": dst, "hx-swap": "none"}) { Yes, I am sure }
			@NeutralButton(templ.Attributes{"@click": "drawer = false"}) { No, cancel }
		</div>
	}
}

templ Import(env Env, dst string) {
	@Modal("") {
		<form id="form" hx-post={dst} hx-encoding="multipart/form-data" hx-target="#modal">
		@ModalHeader() {
			Import from CSV
		}

		@ModalBody() {
			<p class="flex items-center gap-2 mb-2">
			@icons.InformationCircle(icons.Inline)
			Please note, that dagobert will attempt to deduplicate entries.
			</p>

			<div class="form-control mb-2">
			<input name="file" class="file-input file-input-bordered w-full" type="file" />
			</div>
		}

		@ModalFooter() {
			@PrimaryButton(templ.Attributes{"@click": "drawer = false", "type": "submit"}) { Import }
			@NeutralButton(templ.Attributes{"@click": "drawer = false"}) { Cancel }
		}
		</form>
	}
}
