package templ

import (
	"fmt"

	"github.com/sprungknoedl/dagobert/internal/templ/utils"
	"github.com/sprungknoedl/dagobert/pkg/model"
	"github.com/sprungknoedl/dagobert/pkg/valid"
)

type CaseDTO struct {
	ID             int64
	Name           string `form:"name"`
	Closed         bool   `form:"closed"`
	Classification string `form:"classification"`
	Severity       string `form:"severity"`
	Outcome        string `form:"outcome"`
	Summary        string `form:"summary"`
}

templ CaseForm(env utils.Env, obj CaseDTO, vr valid.Result) {
	@utils.Modal("max-w-4xl") {
		<form hx-post={env.Routes("save-case", obj.ID)} hx-target="#modal">
		@utils.ModalHeader() {
			if obj.ID == 0 {
				Add case
			} else {
				Edit case
			}
		}

		@utils.ModalBody() {
			@utils.TextInput("Name", "name", obj.Name, true, vr["Name"])
			@utils.TextInput("Classification", "classification", obj.Classification, true, vr["Classification"])
			@utils.SelectInput("Severity", "severity", obj.Severity, model.CaseSeverities, true, vr["Severity"])
			@utils.SelectInput("Outcome", "outcome", obj.Outcome, model.CaseOutcomes, false, vr["Outcome"])
			@utils.TextareaInput("Summary", "summary", obj.Summary, false, vr["Summary"])
			@utils.BooleanInput("Case closed", "closed", obj.Closed, vr["Closed"])
		}

		@utils.DefaultCrudFooter() {}
		</form>
	}
}

templ CaseList(env utils.Env, list []model.Case) {
	@TableView(env, "Cases", CrudUrls{
		List: env.Routes("list-cases"),
		Import: env.Routes("import-cases"),
		Export: env.Routes("export-cases"),
		Add: env.Routes("view-case", 0),
	}) {
		@utils.TableHead() {
			@utils.TH(env, "id", templ.Attributes{"style": "width: 8rem"}) { ID  }
			@utils.TH(env, "name", templ.Attributes{"style": "width: auto"}) { Name  }
			@utils.TH(env, "classification", templ.Attributes{"style": "width: auto"}) { Classification  }
			@utils.TH(env, "severity", templ.Attributes{"style": "width: auto"}) { Severity  }
			@utils.TH(env, "outcome", templ.Attributes{"style": "width: auto"}) { Outcome  }
			@utils.TH(env, "", templ.Attributes{"style": "width: 7rem"}) { }
		}

		@utils.TableBody() {
			for _, obj := range list {
			@utils.TR(nil) {
				@utils.TD() { <a class="link" href={templ.SafeURL(env.Routes("list-events", obj.ID))}>{ fmt.Sprintf("#%d", obj.ID) }</a> }
				@utils.TD() { <a class="link" href={templ.SafeURL(env.Routes("list-events", obj.ID))}>{ obj.Name }</a> }
				@utils.TD() {{ obj.Classification }}
				@utils.TD() {{ obj.Severity }}
				@utils.TD() {{ obj.Outcome }}
				@utils.DefaultTableButtons(env.Routes("view-case", obj.ID), env.Routes("delete-case", obj.ID)) {}
			}}
		}

		if len(list) == 0 {
			@utils.EmptyCaption(env.Routes("view-case", 0)) {}
		}
	}
}

templ ReportList(env utils.Env, cid int64, list []string) {
	@utils.Modal("max-w-xl") {
		<form action={templ.SafeURL(env.Routes("generate-report", cid))}>
		@utils.ModalHeader() { Select report template }

		@utils.ModalBody() {
			@utils.SelectInput("Template", "tpl", "", list, false, valid.Condition{})
		}

		@utils.ModalFooter() {
			@utils.PrimaryButton(templ.Attributes{"type": "submit", "_": "on click trigger closeModal"}) { Generate }
			@utils.NeutralButton(templ.Attributes{"_": "on click trigger closeModal"}) { Cancel }
		}
		</form>
	}
}
