package sqlite

import (
	"github.com/sprungknoedl/dagobert/model"
	"gorm.io/gorm/clause"
)

var _ model.MalwareStore = &Store{}

func (store *Store) ListMalware(cid int64) ([]model.Malware, error) {
	var list []model.Malware
	result := store.db.Where("case_id = ?", cid).
		Order("filename asc").
		Find(&list)
	return list, result.Error
}

func (store *Store) FindMalware(cid int64, search string, sort string) ([]model.Malware, error) {
	var list []model.Malware
	query := store.db.
		Where("case_id = ?", cid).
		Where(store.db.
			Where("instr(filename, ?) > 0", search).
			Or("instr(filepath, ?) > 0", search).
			Or("instr(system, ?) > 0", search).
			Or("instr(hash, ?) > 0", search).
			Or("instr(notes, ?) > 0", search))

	switch sort {
	case "notes":
		query = query.Order("notes asc, filename asc")
	case "-notes":
		query = query.Order("notes desc, filename asc")
	case "hash":
		query = query.Order("hash asc, filename asc")
	case "-hash":
		query = query.Order("hash desc, filename asc")
	case "system":
		query = query.Order("system asc, filename asc")
	case "-system":
		query = query.Order("system desc, filename asc")
	case "filepath":
		query = query.Order("filepath asc, filename asc")
	case "-filepath":
		query = query.Order("filepath desc, filename asc")
	case "-filename":
		query = query.Order("filename desc")
	default: // case "filename":
		query = query.Order("filename asc")
	}

	result := query.Find(&list)
	return list, result.Error
}

func (store *Store) GetMalware(cid int64, id int64) (model.Malware, error) {
	x := model.Malware{}
	result := store.db.
		Where("case_id = ?", cid).
		First(&x, id)
	return x, result.Error
}

func (store *Store) SaveMalware(cid int64, x model.Malware) (model.Malware, error) {
	x.CRC = model.HashFields(
		x.CaseID,
		x.Filename,
		x.Filepath,
		x.CDate,
		x.MDate,
		x.System,
		x.Hash,
		x.Notes,
	)

	result := store.db.
		Where("case_id = ?", cid).
		Clauses(clause.OnConflict{Columns: []clause.Column{{Name: "crc"}}, DoNothing: true}).
		Save(&x)
	return x, result.Error
}

func (store *Store) DeleteMalware(cid int64, id int64) error {
	x := model.Malware{}
	return store.db.
		Where("case_id = ?", cid).
		Delete(&x, id).Error
}
