package handler

import (
	"cmp"
	"encoding/csv"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oklog/ulid/v2"
	"github.com/sprungknoedl/dagobert/internal/templ"
	"github.com/sprungknoedl/dagobert/internal/templ/utils"
	"github.com/sprungknoedl/dagobert/pkg/model"
	"github.com/sprungknoedl/dagobert/pkg/valid"
)

type MalwareCtrl struct {
	store model.MalwareStore
}

func NewMalwareCtrl(store model.MalwareStore) *MalwareCtrl {
	return &MalwareCtrl{store}
}

func (ctrl MalwareCtrl) List(c echo.Context) error {
	cid, err := ulid.Parse(c.Param("cid"))
	if err != nil || cid == ZeroID {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	sort := c.QueryParam("sort")
	search := c.QueryParam("search")
	list, err := ctrl.store.FindMalware(cid, search, sort)
	if err != nil {
		return err
	}

	return render(c, templ.MalwareList(ctx(c), cid.String(), list))
}

func (ctrl MalwareCtrl) Export(c echo.Context) error {
	cid, err := ulid.Parse(c.Param("cid"))
	if err != nil || cid == ZeroID {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	list, err := ctrl.store.ListMalware(cid)
	if err != nil {
		return err
	}

	c.Response().Header().Set("Content-Disposition", "attachment; filename=\"templ.csv\"")
	c.Response().WriteHeader(http.StatusOK)

	w := csv.NewWriter(c.Response().Writer)
	w.Write([]string{"ID", "Filename", "Filepath", "Create Date", "Modified Date", "System", "Hash", "Notes"})
	for _, e := range list {
		w.Write([]string{
			e.ID.String(),
			e.Filename,
			e.Filepath,
			e.CDate.Format(time.RFC3339),
			e.MDate.Format(time.RFC3339),
			e.System,
			e.Hash,
			e.Notes,
		})
	}

	w.Flush()
	return err
}

func (ctrl MalwareCtrl) Import(c echo.Context) error {
	cid, err := ulid.Parse(c.Param("cid"))
	if err != nil || cid == ZeroID {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	uri := c.Echo().Reverse("import-malware", cid)
	now := time.Now()
	usr := c.Get("user").(string)

	return importHelper(c, uri, 8, func(c echo.Context, rec []string) error {
		id, err := ulid.Parse(cmp.Or(rec[0], ZeroID.String()))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err)
		}

		cdate, err := time.Parse(time.RFC3339, cmp.Or(rec[3], ZeroTime.Format(time.RFC3339)))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err)
		}

		mdate, err := time.Parse(time.RFC3339, cmp.Or(rec[4], ZeroTime.Format(time.RFC3339)))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err)
		}

		obj := model.Malware{
			ID:           cmp.Or(id, ulid.Make()),
			CaseID:       cid,
			Filename:     rec[1],
			Filepath:     rec[2],
			CDate:        cdate, // 3
			MDate:        mdate, // 4
			System:       rec[5],
			Hash:         rec[6],
			Notes:        rec[7],
			DateAdded:    now,
			UserAdded:    usr,
			DateModified: now,
			UserModified: usr,
		}

		_, err = ctrl.store.SaveMalware(cid, obj)
		return err
	})
}

func (ctrl MalwareCtrl) View(c echo.Context) error {
	id, err := ulid.Parse(c.Param("id"))
	if err != nil { // id == 0 is valid in this context
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid malware id")
	}

	cid, err := ulid.Parse(c.Param("cid"))
	if err != nil || cid == ZeroID {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	obj := model.Malware{CaseID: cid}
	if id != ZeroID {
		obj, err = ctrl.store.GetMalware(cid, id)
		if err != nil {
			return err
		}
	}

	return render(c, templ.MalwareForm(ctx(c), templ.MalwareDTO{
		ID:       id.String(),
		CaseID:   cid.String(),
		Filename: obj.Filename,
		Filepath: obj.Filepath,
		CDate:    formatNonZero(time.RFC3339, obj.CDate),
		MDate:    formatNonZero(time.RFC3339, obj.MDate),
		System:   obj.System,
		Hash:     obj.Hash,
		Notes:    obj.Notes,
	}, valid.Result{}))
}

func (ctrl MalwareCtrl) Save(c echo.Context) error {
	id, err := ulid.Parse(c.Param("id"))
	if err != nil { // id == 0 is valid in this context
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid malware id")
	}

	cid, err := ulid.Parse(c.Param("cid"))
	if err != nil || cid == ZeroID {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	dto := templ.MalwareDTO{ID: id.String(), CaseID: cid.String()}
	if err = c.Bind(&dto); err != nil {
		return err
	}

	if vr := ValidateMalware(dto); !vr.Valid() {
		return render(c, templ.MalwareForm(ctx(c), dto, vr))
	}

	cdate, err := time.Parse(time.RFC3339, dto.CDate)
	if dto.CDate != "" && err != nil {
		return err // if ValidateMalware is correct, this should never happen
	}

	mdate, err := time.Parse(time.RFC3339, dto.MDate)
	if dto.MDate != "" && err != nil {
		return err // if ValidateMalware is correct, this should never happen
	}

	now := time.Now()
	usr := c.Get("user").(string)
	obj := model.Malware{
		ID:           cmp.Or(id, ulid.Make()),
		CaseID:       cid,
		Filename:     dto.Filename,
		Filepath:     dto.Filepath,
		CDate:        cdate,
		MDate:        mdate,
		System:       dto.System,
		Hash:         dto.Hash,
		Notes:        dto.Notes,
		DateAdded:    now,
		UserAdded:    usr,
		DateModified: now,
		UserModified: usr,
	}

	if id != ZeroID {
		src, err := ctrl.store.GetMalware(cid, id)
		if err != nil {
			return err
		}

		obj.DateAdded = src.DateAdded
		obj.UserAdded = src.UserAdded
	}

	if _, err := ctrl.store.SaveMalware(cid, obj); err != nil {
		return err
	}

	return refresh(c)
}

func (ctrl MalwareCtrl) Delete(c echo.Context) error {
	id, err := ulid.Parse(c.Param("id"))
	if err != nil || id == ZeroID {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid malware id")
	}

	cid, err := ulid.Parse(c.Param("cid"))
	if err != nil || cid == ZeroID {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	if c.QueryParam("confirm") != "yes" {
		uri := c.Echo().Reverse("delete-malware", cid, id) + "?confirm=yes"
		return render(c, utils.Confirm(ctx(c), uri))
	}

	err = ctrl.store.DeleteMalware(cid, id)
	if err != nil {
		return err
	}

	return refresh(c)
}
