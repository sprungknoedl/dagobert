package model

import (
	"database/sql"
	"encoding/json"
)

var MalwareStatus = FromEnv("VALUES_MALWARE_STATUS", []string{"Malicious", "Suspicious", "Under investigation", "Unrelated"})

type Malware struct {
	ID       string
	Status   string
	Path     string
	Hash     string
	Notes    string
	CaseID   string
	RawAsset []byte

	Asset Asset
}

func (store *Store) ListMalware(cid string) ([]Malware, error) {
	query := `
	SELECT 
		m.id, m.status, m.path, m.hash, m.notes, m.case_id,
		json_object('ID', a.id, 'Type', a.type, 'Name', a.name)
	FROM malware m
	LEFT JOIN assets a ON m.asset_id = a.id
	WHERE m.case_id = :cid
	ORDER BY m.path ASC`

	rows, err := store.DB.Query(query,
		sql.Named("cid", cid))
	if err != nil {
		return nil, err
	}

	list := []Malware{}
	err = ScanAll(rows, &list)

	// unmarshal json encoded relations
	for i, elem := range list {
		err = json.Unmarshal(elem.RawAsset, &elem.Asset)
		if err != nil {
			return nil, err
		}

		list[i] = elem
	}

	return list, err
}

func (store *Store) GetMalware(cid string, id string) (Malware, error) {
	query := `
	SELECT 
		m.id, m.status, m.path, m.hash, m.notes, m.case_id,
		json_object('ID', a.id, 'Type', a.type, 'Name', a.name)
	FROM malware m
	LEFT JOIN assets a ON m.asset_id = a.id
	WHERE m.case_id = :cid AND m.id = :id
	LIMIT 1`

	rows, err := store.DB.Query(query,
		sql.Named("cid", cid),
		sql.Named("id", id))
	if err != nil {
		return Malware{}, err
	}

	obj := Malware{}
	err = ScanOne(rows, &obj)
	if err != nil {
		return Malware{}, err
	}

	// unmarshal json encoded relations
	err = json.Unmarshal(obj.RawAsset, &obj.Asset)
	if err != nil {
		return Malware{}, err
	}

	return obj, err
}

func (store *Store) SaveMalware(cid string, obj Malware) error {
	query := `
	REPLACE INTO malware (id, status, path, hash, notes, case_id, asset_id)
	VALUES (iif(:id != '', :id, lower(hex(randomblob(5)))), :status, :path, :hash, :notes, :cid, :asset)`

	_, err := store.DB.Exec(query,
		sql.Named("cid", cid),
		sql.Named("id", obj.ID),
		sql.Named("status", obj.Status),
		sql.Named("path", obj.Path),
		sql.Named("hash", obj.Hash),
		sql.Named("asset", obj.Asset.ID),
		sql.Named("notes", obj.Notes))
	return err
}

func (store *Store) DeleteMalware(cid string, id string) error {
	query := `
	DELETE FROM malware
	WHERE id = :id`

	_, err := store.DB.Exec(query,
		sql.Named("id", id))
	return err
}
