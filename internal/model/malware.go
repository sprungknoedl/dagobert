package model

import (
	"database/sql"
	"encoding/json"
)

var MalwareStatus = FromEnv("VALUES_MALWARE_STATUS", []string{"Confirmed", "Suspicious", "Under Investigation", "Unrelated"})

type Malware struct {
	ID       string
	Status   string
	Name     string
	Path     string
	Hash     string
	Notes    string
	CaseID   string
	RawAsset []byte

	Asset Asset
}

func (store *Store) FindMalware(cid string, search string, sort string) ([]Malware, error) {
	query := `
	SELECT 
		m.id, m.status, m.name, m.path, m.hash, m.notes, m.case_id,
		json_object('ID', a.id, 'Type', a.type, 'Name', a.name)
	FROM malware m
	LEFT JOIN
		assets a ON m.asset_id = a.id
	WHERE m.case_id = :cid AND (
		instr(m.name, :search) > 0 OR
		instr(m.path, :search) > 0 OR
		instr(a.name, :search) > 0 OR
		instr(m.hash, :search) > 0 OR
		instr(m.notes, :search) > 0)
	ORDER BY
		CASE WHEN :sort = 'notes'   THEN m.notes END ASC,
		CASE WHEN :sort = '-notes'  THEN m.notes END DESC,
		CASE WHEN :sort = 'hash'    THEN m.hash END ASC,
		CASE WHEN :sort = '-hash'   THEN m.hash END DESC,
		CASE WHEN :sort = 'system'  THEN a.name END ASC,
		CASE WHEN :sort = '-system' THEN a.name END DESC,
		CASE WHEN :sort = 'path'    THEN m.path END ASC,
		CASE WHEN :sort = '-path'   THEN m.path END DESC,
		CASE WHEN :sort = '-name'   THEN m.name END DESC,
		m.name ASC`

	rows, err := store.db.Query(query,
		sql.Named("cid", cid),
		sql.Named("search", search),
		sql.Named("sort", sort))
	if err != nil {
		return nil, err
	}

	var list []Malware
	err = ScanAll(rows, &list)

	// unmarshal json encoded relations
	for i, elem := range list {
		err = json.Unmarshal(elem.RawAsset, &elem.Asset)
		if err != nil {
			return nil, err
		}

		list[i] = elem
	}

	return list, err
}

func (store *Store) GetMalware(cid string, id string) (Malware, error) {
	query := `
	SELECT 
		m.id, m.status, m.name, m.path, m.hash, m.notes, m.case_id,
		json_object('ID', a.id, 'Type', a.type, 'Name', a.name)
	FROM malware m
	LEFT JOIN
		assets a ON m.asset_id = a.id
	WHERE m.case_id = :cid AND m.id = :id
	LIMIT 1`

	rows, err := store.db.Query(query,
		sql.Named("cid", cid),
		sql.Named("id", id))
	if err != nil {
		return Malware{}, err
	}

	var obj Malware
	err = ScanOne(rows, &obj)
	if err != nil {
		return Malware{}, err
	}

	// unmarshal json encoded relations
	err = json.Unmarshal(obj.RawAsset, &obj.Asset)
	if err != nil {
		return Malware{}, err
	}

	return obj, err
}

func (store *Store) SaveMalware(cid string, obj Malware) error {
	query := `
	REPLACE INTO malware (id, status, name, path, hash, notes, case_id, asset_id)
	VALUES (NULLIF(:id, ''), :status, :name, :path, :hash, :notes, :cid, :asset)`

	_, err := store.db.Exec(query,
		sql.Named("cid", cid),
		sql.Named("id", obj.ID),
		sql.Named("status", obj.Status),
		sql.Named("name", obj.Name),
		sql.Named("path", obj.Path),
		sql.Named("hash", obj.Hash),
		sql.Named("asset", obj.Asset.ID),
		sql.Named("notes", obj.Notes))
	return err
}

func (store *Store) DeleteMalware(cid string, id string) error {
	query := `
	DELETE FROM malware
	WHERE id = :id`

	_, err := store.db.Exec(query,
		sql.Named("id", id))
	return err
}
