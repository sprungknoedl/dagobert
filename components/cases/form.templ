package cases

import (
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/components/icons"
    "github.com/sprungknoedl/dagobert/model"
    "github.com/sprungknoedl/dagobert/valid"
)

type CaseDTO struct {
	ID             int64
	Name           string `form:"name"`
	Closed         bool   `form:"closed"`
	Classification string `form:"classification"`
	Severity       string `form:"severity"`
	Outcome        string `form:"outcome"`
	Summary        string `form:"summary"`
}

templ Form(env utils.Env, obj CaseDTO, vr valid.Result) {
    <aside class="overflow-y-auto overflow-x-hidden fixed top-0 right-0 z-10 flex justify-center items-center w-full h-full backdrop-blur-lg backdrop-brightness-50"
        _="on closeModal remove me">
        <div class="w-1/2 m-8 bg-slate-800 shadow-xl rounded-xl">
            <form hx-post={env.Routes("save-case", obj.ID)} hx-target="#modal">
                <header class="p-6 px-8 border-b border-b-slate-700 flex justify-between">
                    <h4 class="font-bold text-slate-200">
                        if obj.ID == 0 {
                            Add case
                        } else {
                            Edit case
                        }
                    </h4>
                    <div>
                        <button type="button" _="on click trigger closeModal"> @icons.XMark(icons.Default) </button>
                    </div>
                </header>
      
                <section class="p-8 flex flex-col gap-6">
                    @utils.WithLabel2("Name", true)            { @utils.TextInput2("name", obj.Name, vr["Name"]) }
                    @utils.WithLabel2("Case closed?", false)   { @utils.BooleanInput2("closed", obj.Closed, vr["Closed"]) }
                    @utils.WithLabel2("Classification", true)  { @utils.TextInput2("classification", obj.Classification, vr["Classification"]) }
                    @utils.WithLabel2("Severity", true)        { @utils.SelectInput2("severity", obj.Severity, model.CaseSeverities, vr["Severity"]) }
                    @utils.WithLabel2("Outcome", false)        { @utils.SelectInput2("outcome", obj.Outcome, model.CaseOutcomes, vr["Outcome"]) }
                    @utils.WithLabel2("Summary", false)        { @utils.TextareaInput2("summary", obj.Summary, vr["Summary"]) }
                </section>

                <footer class="p-6 px-8 border-t border-t-slate-700 flex gap-4 items-center">
                    @utils.PrimaryButton(templ.Attributes{"type": "submit"}) { Save }
                    @utils.SecondaryButton(templ.Attributes{"_": "on click trigger closeModal"}) { Cancel }
                    <p class="ml-4 text-slate-600">Fields marked with <span class="font-bold text-rose-500">*</span> are required.</p>
                </footer>
            </form>
        </div>
    </aside>
}