package cases

import (
    "fmt"

    "github.com/sprungknoedl/dagobert/model"
	"github.com/sprungknoedl/dagobert/components/base"
    "github.com/sprungknoedl/dagobert/components/icons"
	"github.com/sprungknoedl/dagobert/components/utils"
)

templ Overview(env utils.Env, obj model.Case) {
    @base.Layout(env) {
        <main class="p-4 grow">
            @base.Navbar(env, fmt.Sprintf("#%d - %s", obj.ID, obj.Name), false, false) {
                @utils.GroupedLink(templ.Attributes{"href": env.Routes("generate-report", obj.ID), "target": "blank"}) {
                    @icons.DocumentArrowDown("inline-block mr-1 w-5 h-5")
                    Generate report
                }
                @utils.GroupedButton(templ.Attributes{"hx-get": env.Routes("show-case", obj.ID), "hx-target": "section", "hx-select": "section", "hx-swap": "outerHTML"}) {
                    @icons.ArrowPath("inline-block mr-1 w-5 h-5")
                    Refresh
                }
                @utils.GroupedButton(templ.Attributes{"hx-get": env.Routes("view-case", obj.ID), "hx-target": "#modal"}) {
                    @icons.Pencil("inline-block mr-1 w-5 h-5")
                    Edit
                }
            }
            
            <section class="flex gap-4">
                <div class="w-1/2 grid grid-cols-3 gap-4">
                    @card("Opened", icons.Clock) {{ obj.DateAdded.Format("2006-01-02") }}
                    @card("Classification", icons.ClipboardCheck) {{ obj.Classification }}
                    @card("Severity", icons.Bolt) { @dlSeverity(obj.Severity) }
                    @card("State", icons.Briefcase) { @dlClosed(obj.Closed) }
                    @card("Outcome", icons.ViewfinderCircle) { @dlOutcome(obj.Outcome) }
                </div>

                <div class="bg-slate-700 p-4 w-1/2 sm:rounded-lg">
                    <h4 class="font-bold text-xs text-slate-400 uppercase mb-4 pb-2 border-b border-b-slate-600">Summary</h4>
                    <p>{obj.Summary}</p>
                </div>
            </section>
        </main>
    }
}

type Icon func(string) templ.Component

templ card(title string, icon Icon) {
    <div class="p-6 rounded-lg bg-slate-700 text-center">
        @icon("w-7 h-7 text-slate-400 mb-3 mx-auto")
        <h5 class="mb-2 text-2xl font-semibold tracking-tight text-white">{title}</h5>
        <p class="mb-3 font-normal text-slate-400">{ children... }</p>
    </div>
}

templ dlClosed(closed bool) {
    if closed { 
        Closed
    } else {
        <span class="text-red-400"> Open </span>
    }
}

templ dlSeverity(severity string) {
    switch severity {
    case "Low":    
        <span class="text-yellow-400"> {severity} </span>
    case "Medium": 
        <span class="text-amber-400"> {severity} </span>
    case "High":   
        <span class="text-red-400"> {severity} </span>
    default:
        <span class="text-slate-400"> Unknown </span>
    }
}

templ dlOutcome(outcome string) {
    switch outcome {
    case "False positive" : 
        <span class="text-green-400"> {outcome} </span>
    case "True positive"  :
        <span class="text-red-400"> {outcome} </span>
    case "Benign positive":
        <span class="text-slate-400"> {outcome} </span>
    default:
        <span class="text-slate-400"> Unknown </span>
    }
}