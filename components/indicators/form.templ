package indicators

import (
    "github.com/sprungknoedl/dagobert/components/icons"
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/model"
    "github.com/sprungknoedl/dagobert/valid"
)

type IndicatorDTO struct {
    ID          int64
    CaseID      int64
	Type        string `form:"type"`
	Value       string `form:"value"`
	TLP         string `form:"tlp"`
	Description string `form:"description"`
	Source      string `form:"source"`
}

templ Form(env utils.Env, obj IndicatorDTO, vr valid.Result) {
    <aside class="overflow-y-auto overflow-x-hidden fixed top-0 right-0 z-10 flex justify-center items-center w-full h-full backdrop-blur-lg backdrop-brightness-50"
        _="on closeModal remove me">
        <div class="w-1/2 m-8 bg-slate-800 shadow-xl rounded-xl">
            <form hx-post={env.Routes("save-indicator", obj.CaseID, obj.ID)} hx-target="#modal">
                <header class="p-6 px-8 border-b border-b-slate-700 flex justify-between">
                    <h4 class="font-bold text-slate-200">
                        if obj.ID == 0 {
                            Add indicator
                        } else {
                            Edit indicator
                        }
                    </h4>
                    <div>
                        <button type="button" _="on click trigger closeModal"> @icons.XMark(icons.Default) </button>
                    </div>
                </header>
      
                <section class="p-8 flex flex-col gap-6">
                    @utils.WithLabel2("Type", true)         { @utils.SelectInput2("type", obj.Type, model.IndicatorTypes, vr["Type"]) }
                    @utils.WithLabel2("Value", true)        { @utils.TextInput2("value", obj.Value, vr["Value"]) }
                    @utils.WithLabel2("Description", false) { @utils.TextareaInput2("description", obj.Description, vr["Description"]) }
                    @utils.WithLabel2("TLP", true)          { @utils.SelectInput2("tlp", obj.TLP, model.IndicatorTLPs, vr["TLP"]) }
                    @utils.WithLabel2("Source", false)      { @utils.TextInput2("source", obj.Source, vr["Source"]) }
                </section>

                <footer class="p-6 px-8 border-t border-t-slate-700 flex gap-4 items-center">
                    @utils.PrimaryButton(templ.Attributes{"type": "submit"}) { Save }
                    @utils.SecondaryButton(templ.Attributes{"_": "on click trigger closeModal"}) { Cancel }
                    <p class="ml-4 text-slate-600">Fields marked with <span class="font-bold text-rose-500">*</span> are required.</p>
                </footer>
            </form>
        </div>
    </aside>
}