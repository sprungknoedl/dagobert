package indicators

import (
	"github.com/sprungknoedl/dagobert/components/base"
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/components/icons"
    "github.com/sprungknoedl/dagobert/model"
)

templ List(env utils.Env, cid int64, list []model.Indicator) {
    @base.TableView(env, "Indicators", base.CrudUrls{
        List: env.Routes("list-indicators", cid),
        Import: env.Routes("import-indicators", cid),
        Export: env.Routes("export-indicators", cid),
        Add: env.Routes("view-indicator", cid, 0),
    }) {
        @utils.TableHead() {
            @utils.TH(env, "type", templ.Attributes{"style": "width: 10rem"}) { Type  }
            @utils.TH(env, "value", templ.Attributes{"style": "width: auto"})  { Value  }
            @utils.TH(env, "desc", templ.Attributes{"style": "width: auto"})  { Description  }
            @utils.TH(env, "tlp", templ.Attributes{"style": "width: 8rem"})  { TLP  }
            @utils.TH(env, "source", templ.Attributes{"style": "width: auto"})  { Source  }
            @utils.TH(env, "", templ.Attributes{"style": "width: 7rem"})  { }
        }
        
        @utils.TableBody() {
            for _, obj := range list {
            @utils.TR() {
                @utils.TD() {@renderType(obj.Type)}
                @utils.TD() {{ obj.Value }}
                @utils.TD() {{ obj.Description }}
                @utils.TD() {@renderTLP(obj.TLP)}
                @utils.TD() {{ obj.Source }}
                @utils.DefaultTableButtons(env.Routes("view-indicator", cid, obj.ID), env.Routes("delete-indicator", cid, obj.ID)) {}
            }}
        }

        if len(list) == 0 {
            @utils.EmptyCaption(env.Routes("view-indicator", cid, 0)) {}
        }
    }
}

templ renderType(value string) {
    switch value {
    case "IP":
        @icons.MapPin("inline-block w-6 h-6 mr-2")
    case "Domain":
        @icons.GlobeEurope("inline-block w-6 h-6 mr-2")
    case "URL":
        @icons.Link("inline-block w-6 h-6 mr-2")
    case "Path":
        @icons.FolderOpen("inline-block w-6 h-6 mr-2")
    case "Hash":
        @icons.Fingerprint("inline-block w-6 h-6 mr-2")
    case "Service":
        @icons.CommandLine("inline-block w-6 h-6 mr-2")
    default:
        @icons.QuestionMarkCircle("inline-block w-6 h-6 mr-2")
    }
    {value}
}

templ renderTLP(value string) {
    switch value {
    case "TLP:RED":
        <span class="text-red-500">{value}</span>
    case "TLP:AMBER":
        <span class="text-amber-500">{value}</span>
    case "TLP:GREEN":
        <span class="text-green-500">{value}</span>
    default:
        {value}
    }
}