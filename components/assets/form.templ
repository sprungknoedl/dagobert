package assets

import (
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/model"
    "github.com/sprungknoedl/dagobert/pkg/valid"
)

type AssetDTO struct {
    ID          int64
    CaseID      int64
	Type        string `form:"type"`
	Name        string `form:"name"`
	IP          string `form:"ip"`
	Description string `form:"description"`
	Compromised string `form:"compromised"`
	Analysed    bool   `form:"analysed"`
}

templ Form(env utils.Env, obj AssetDTO, vr valid.Result) {
    @utils.Modal("max-w-4xl") {
        <form hx-post={env.Routes("save-asset", obj.CaseID, obj.ID)} hx-target="#modal">
        @utils.ModalHeader() {
            if obj.ID == 0 {
                Add asset
            } else {
                Edit asset
            }
        }

        @utils.ModalBody() {
            @utils.SelectInput("Type", "type", obj.Type, model.AssetTypes, true, vr["Type"])
            @utils.TextInput("Name", "name", obj.Name, true, vr["Name"])
            @utils.TextInput("IP", "ip", obj.IP, false, vr["IP"])
            @utils.TextareaInput("Description", "description", obj.Description, false, vr["Description"])
            @utils.SelectInput("Compromised", "compromised", obj.Compromised, model.AssetCompromised, true, vr["Compromised"])
            @utils.BooleanInput("Analysed", "analysed", obj.Analysed, vr["Analysed"])
        }

        @utils.DefaultCrudFooter() {}
        </form>
    }
}