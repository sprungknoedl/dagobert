package assets

import (
	"github.com/sprungknoedl/dagobert/components/base"
    "github.com/sprungknoedl/dagobert/components/icons"
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/model"
)

templ List(env utils.Env, cid int64, list []model.Asset) {
    @base.TableView(env, "Assets", base.CrudUrls{
        List: env.Routes("list-assets", cid),
        Import: env.Routes("import-assets", cid),
        Export: env.Routes("export-assets", cid),
        Add: env.Routes("view-asset", cid, 0),
    }) {
        @utils.TableHead() {
            @utils.TH(env, "type", templ.Attributes{"style": "width: 10rem"}) { Type  }
            @utils.TH(env, "name", templ.Attributes{"style": "width: auto"})  { Name  }
            @utils.TH(env, "ip", templ.Attributes{"style": "width: 10rem"}) { IP  }
            @utils.TH(env, "desc", templ.Attributes{"style": "width: auto"})  { Description  }
            @utils.TH(env, "compromised", templ.Attributes{"style": "width: 10rem"})  { Compromised  }
            @utils.TH(env, "analysed", templ.Attributes{"style": "width: 8rem"})  { Analysed  }
            @utils.TH(env, "", templ.Attributes{"style": "width: 7rem"})  { }
        }

        @utils.TableBody() {
            for _, obj := range list {
            @utils.TR() {
                @utils.TD() {@renderType(obj.Type)}
                @utils.TD() {{ obj.Name }}
                @utils.TD() {{ obj.IP }}
                @utils.TD() {{ obj.Description }}
                @utils.TD() {@renderCompromised(obj.Compromised)}
                @utils.TD() {@renderAnalysed(obj.Analysed)}
                @utils.DefaultTableButtons(env.Routes("view-asset", cid, obj.ID), env.Routes("delete-asset", cid, obj.ID)) {}
            }}
        }

        if len(list) == 0 {
            @utils.EmptyCaption(env.Routes("view-asset", cid, 0)) {}
        }
    }
}

templ renderType(value string) {
    switch value {
    case "Account": 
        @icons.User("inline-block w-6 h-6 mr-2")
    case "Desktop":
        @icons.Desktop("inline-block w-6 h-6 mr-2")
    case "Server":
        @icons.Server("inline-block w-6 h-6 mr-2")
    default :
         @icons.QuestionMarkCircle("inline-block w-6 h-6 mr-2")    
    }
    {value}
}

templ renderCompromised(value string) {
    switch value {
    case "Compromised":
        <span class="text-red-500"> @icons.Bug("inline-block w-6 h-6 mr-2") Yes </span>
    case "Not compromised":
        No
    case "Unknown":
        Unknown
    default:
        {value}
    }
}

templ renderAnalysed(value bool) {
    if value {
        @icons.CheckCircle("w-6 h-6 text-green-500")
    } else {
        @icons.XCircle("w-6 h-6 text-red-500")
    }
}
