package tasks

import (
	"github.com/sprungknoedl/dagobert/components/base"
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/components/icons"
    "github.com/sprungknoedl/dagobert/model"
)

templ renderType(value string) {
    switch value {
    case "Information request":
        @icons.QuestionMarkCircle("inline-block w-6 h-6 mr-2")
    case "Analysis":
        @icons.MagnifyingGlass("inline-block w-6 h-6 mr-2")
    case "Deliverable":
        @icons.DocumentText("inline-block w-6 h-6 mr-2")
    case "Checkpoint":
        @icons.ClipboardCheck("inline-block w-6 h-6 mr-2")
    default:
        @icons.QuestionMarkCircle("inline-block w-6 h-6 mr-2")
    }
    {value}
}

templ renderDone(value bool) {
    if value {
        @icons.CheckCircle("w-6 h-6 text-green-500")
    } else {
        @icons.XCircle("w-6 h-6 text-red-500")
    }
}

templ List(env utils.Env, cid int64, list []model.Task) {
    @base.Layout(env) {
        <main class="p-4 grow">
            <nav class="flex items-center justify-between mb-4">
                <h3 class="font-bold text-2xl ml-2">Tasks</h3>
                
                <div class="flex gap-5 items-center">
                    @icons.MagnifyingGlass(icons.Default)

                    <input style="width: 32rem" name="search" placeholder="Search" type="search" class="px-4 h-10 outline outline-2 outline-offset-2 outline-slate-600 bg-slate-700 text-white rounded-md shadow-sm" 
                        hx-get={env.Routes("list-tasks", cid)} hx-trigger="input changed delay:300ms, search" 
                        hx-target="main table" hx-select="table" hx-swap="outerHTML"/>
                    
                    @utils.SecondaryButton(templ.Attributes{"hx-get": env.Routes("import-tasks", cid), "hx-target": "#modal"}) {
                        @icons.ArrowUpTray("inline-block mr-1 w-5 h-5")
                        Import CSV
                    }
                    @utils.SecondaryLink(templ.Attributes{"href": env.Routes("export-tasks", cid), "target": "blank"}) {
                        @icons.ArrowDownTray("inline-block mr-1 w-5 h-5")
                        Export CSV
                    }
                    @utils.SecondaryButton(templ.Attributes{"hx-get": env.Routes("list-tasks", 0), "hx-target": "#list", "hx-select": "#list", "hx-swap": "outerHTML"}) {
                        @icons.ArrowPath("inline-block mr-1 w-5 h-5")
                        Refresh
                    }
                    @utils.PrimaryButton(templ.Attributes{"hx-get": env.Routes("view-task", cid, 0), "hx-target": "#modal"}) {
                        @icons.Plus("inline-block mr-1 w-5 h-5")
                        Add
                    }
                </div>
            </nav>

            <table id="list" class="table-auto w-full">
                <thead class="border-b-2 border-b-slate-600">
                    <tr class="p-8">
                        @utils.TH(templ.Attributes{"style": "width: 8rem"}) { Date added }
                        @utils.TH(templ.Attributes{"style": "width: 8rem"}) { Date due  }
                        @utils.TH(templ.Attributes{"style": "width: auto"}) { Type }
                        @utils.TH(templ.Attributes{"style": "width: auto"}) { Task }
                        @utils.TH(templ.Attributes{"style": "width: auto"}) { Owner }
                        @utils.TH(templ.Attributes{"style": "width: auto"}) { Done }
                        @utils.TH(templ.Attributes{"style": "width: 7rem"}) { }
                    </tr>
                </thead>
                <tbody>
                    for _, obj := range list {
                    <tr class="hover:bg-slate-700">
                        <td class="p-2">{ obj.DateAdded.Format("2006-01-02") }</td>
                        <td class="p-2">{ obj.DateDue.Format("2006-01-02") }</td>
                        <td class="p-2">@renderType(obj.Type)</td>
                        <td class="p-2">{ obj.Task }</td>
                        <td class="p-2">{ obj.Owner }</td>
                        <td class="p-2">@renderDone(obj.Done)</td>

                        <td class="p-2 flex gap-2 justify-end">
                            @utils.InlineButton(templ.Attributes{
                                "hx-get": env.Routes("view-task", cid, obj.ID), 
                                "hx-target": "#modal"}) {
                                @icons.Pencil("w-4 h-4") }
                            @utils.InlineButton(templ.Attributes{
                                "hx-delete": env.Routes("delete-task", cid, obj.ID), 
                                "hx-target": "#modal"}) {
                                @icons.Trash("w-4 h-4") }
                        </td>
                    </tr>
                    }
                </tbody>

                if len(list) == 0 {
                <caption class="caption-bottom w-1/3 my-4 mx-auto">
                    <h3 class="mb-2 mt-4 text-xl text-slate-400">
                        @icons.FaceFrown("inline-block w-6 h-6 mr-2")
                        Nothing here ...
                    </h3>
                    <p class="mb-8">It looks empty here. Try creating a new case â†“</p>
                    <p class="flex justify-center">
                    @utils.PrimaryButton(templ.Attributes{"hx-get": env.Routes("view-task", cid, 0), "hx-target": "#modal"}) {
                        @icons.Plus("inline-block mr-1 w-5 h-5")
                        Add
                    }
                    </p>
                </caption>
                }
            </table>
        </main>
    }
}