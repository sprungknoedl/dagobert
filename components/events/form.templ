package events

import (
    "github.com/sprungknoedl/dagobert/components/icons"
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/model"
    "github.com/sprungknoedl/dagobert/valid"
)

type EventDTO struct {
	ID        int64
	CaseID    int64
	Time      string `form:"time"`
	Type      string `form:"type"`
	AssetA    string `form:"assetA"`
	AssetB    string `form:"assetB"`
	Direction string `form:"direction"`
	Event     string `form:"event"`
	Raw       string `form:"raw"`
	KeyEvent  bool   `form:"keyevent"`
}

templ Form(env utils.Env, obj EventDTO, vr valid.Result) {
    <aside class="overflow-y-auto overflow-x-hidden fixed top-0 right-0 z-10 flex justify-center items-center w-full h-full backdrop-blur-lg backdrop-brightness-50"
        _="on closeModal remove me">
        <div class="w-1/2 m-8 bg-slate-800 shadow-xl rounded-xl">
            <form hx-post={env.Routes("save-event", obj.CaseID, obj.ID)} hx-target="#modal">
                <header class="p-6 px-8 border-b border-b-slate-700 flex justify-between">
                    <h4 class="font-bold text-slate-200">
                        if obj.ID == 0 {
                            Add event
                        } else {
                            Edit event
                        }
                    </h4>
                    <div>
                        <button type="button" _="on click trigger closeModal"> @icons.XMark(icons.Default) </button>
                    </div>
                </header>
      
                <section class="p-8 flex flex-col gap-6">
                    @utils.WithLabel("Date / Time", true)    { @utils.TextInput("time", obj.Time, vr["Time"]) }
                    @utils.WithLabel("Type", true)           { @utils.SelectInput("type", obj.Type, model.EventTypes, vr["Type"]) }
                    @utils.WithLabel("Event System", true)   { @utils.TextInput("assetA", obj.AssetA, vr["Event System"]) }
                    @utils.WithLabel("Direction", false)     { @utils.SelectInput("direction", obj.Direction, model.EventDirections, vr["Direction"]) }
                    @utils.WithLabel("Remote System", false) { @utils.TextInput("assetB", obj.AssetB, vr["Remote System"]) }
                    @utils.WithLabel("Event", true)          { @utils.TextareaInput("event", obj.Event, vr["Event"]) }
                    @utils.WithLabel("Raw", false)           { @utils.TextareaInput("raw", obj.Raw, vr["Raw"]) }
                    @utils.WithLabel("Key Event?", false)    { @utils.BooleanInput("keyevent", obj.KeyEvent, vr["Key Event"]) }
                </section>

                <footer class="p-6 px-8 border-t border-t-slate-700 flex gap-4 items-center">
                    @utils.PrimaryButton(templ.Attributes{"type": "submit"}) { Save }
                    @utils.SecondaryButton(templ.Attributes{"_": "on click trigger closeModal"}) { Cancel }
                    <p class="ml-4 text-slate-600">Fields marked with <span class="font-bold text-rose-500">*</span> are required.</p>
                </footer>
            </form>
        </div>
    </aside>
}