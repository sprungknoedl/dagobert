package events

import (
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/model"
    "github.com/sprungknoedl/dagobert/pkg/valid"
)

type EventDTO struct {
	ID        int64
	CaseID    int64
	Time      string `form:"time"`
	Type      string `form:"type"`
	AssetA    string `form:"assetA"`
	AssetB    string `form:"assetB"`
	Direction string `form:"direction"`
	Event     string `form:"event"`
	Raw       string `form:"raw"`
	KeyEvent  bool   `form:"keyevent"`
}

func optional(slice []string) []string {
    return append([]string{""}, slice...)
}

templ Form(env utils.Env, obj EventDTO, assets []string, vr valid.Result) {
    @utils.Modal("max-w-4xl") {
        <form hx-post={env.Routes("save-event", obj.CaseID, obj.ID)} hx-target="#modal">
        @utils.ModalHeader() {
            if obj.ID == 0 {
                Add event
            } else {
                Edit event
            }
        }
                
        @utils.ModalBody() {
            @utils.TextInput("Date / Time", "time", obj.Time, true, vr["Time"])
            @utils.SelectInput("Type", "type", obj.Type, model.EventTypes, true, vr["Type"])
            @utils.SelectInput("Event System", "assetA", obj.AssetA, assets, true, vr["Event System"])
            @utils.SelectInput("Direction", "direction", obj.Direction, model.EventDirections, false, vr["Direction"])
            @utils.SelectInput("Remote System", "assetB", obj.AssetB, optional(assets), false, vr["Remote System"])
            @utils.TextareaInput("Event", "event", obj.Event, true, vr["Event"])
            @utils.TextareaInput("Raw", "raw", obj.Raw, false, vr["Raw"])
            @utils.BooleanInput("Key Event", "keyevent", obj.KeyEvent, vr["Key Event"])
        }

        @utils.DefaultCrudFooter() {}
        </form>
    }
}