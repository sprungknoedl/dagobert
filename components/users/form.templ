package users

import (
    "github.com/sprungknoedl/dagobert/components/icons"
	"github.com/sprungknoedl/dagobert/components/utils"
    "github.com/sprungknoedl/dagobert/valid"
)

type UserDTO struct {
	ID      int64
	CaseID  int64
	Name    string `form:"name"`
	Company string `form:"company"`
	Role    string `form:"role"`
	Email   string `form:"email"`
	Phone   string `form:"phone"`
	Notes   string `form:"notes"`
}

templ Form(env utils.Env, obj UserDTO, vr valid.Result) {
    <aside class="overflow-y-auto overflow-x-hidden fixed top-0 right-0 z-10 flex justify-center items-center w-full h-full backdrop-blur-lg backdrop-brightness-50"
        _="on closeModal remove me">
        <div class="w-1/2 m-8 bg-slate-800 shadow-xl rounded-xl">
            <form hx-post={env.Routes("save-user", obj.CaseID, obj.ID)} hx-target="#modal">
                <header class="p-6 px-8 border-b border-b-slate-700 flex justify-between">
                    <h4 class="font-bold text-slate-200">
                        if obj.ID == 0 {
                            Add user
                        } else {
                            Edit user
                        }
                    </h4>
                    <div>
                        <button type="button" _="on click trigger closeModal"> @icons.XMark(icons.Default) </button>
                    </div>
                </header>
      
                <section class="p-8 flex flex-col gap-6">
                    @utils.WithLabel("Name", true)     { @utils.TextInput("name", obj.Name, vr["Name"]) }
                    @utils.WithLabel("Company", false) { @utils.TextInput("company", obj.Company, vr["Company"]) }
                    @utils.WithLabel("Role", false)    { @utils.TextInput("role", obj.Role, vr["Role"]) }
                    @utils.WithLabel("Email", false)   { @utils.TextInput("email", obj.Email, vr["Email"]) }
                    @utils.WithLabel("Phone", false)   { @utils.TextInput("phone", obj.Phone, vr["Phone"]) }
                    @utils.WithLabel("Notes", false)   { @utils.TextareaInput("notes", obj.Notes, vr["Notes"]) }
                </section>

                <footer class="p-6 px-8 border-t border-t-slate-700 flex gap-4 items-center">
                    @utils.PrimaryButton(templ.Attributes{"type": "submit"}) { Save }
                    @utils.SecondaryButton(templ.Attributes{"_": "on click trigger closeModal"}) { Cancel }
                    <p class="ml-4 text-slate-600">Fields marked with <span class="font-bold text-rose-500">*</span> are required.</p>
                </footer>
            </form>
        </div>
    </aside>
}