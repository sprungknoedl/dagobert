package handler

import (
	"encoding/csv"
	"io"
	"net/http"
	"strconv"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/sprungknoedl/dagobert/components/malware"
	"github.com/sprungknoedl/dagobert/components/utils"
	"github.com/sprungknoedl/dagobert/model"
)

type MalwareDTO struct {
	Filename string    `form:"filename"`
	Filepath string    `form:"filepath"`
	CDate    time.Time `form:"cDate"`
	MDate    time.Time `form:"mDate"`
	System   string    `form:"system"`
	Hash     string    `form:"hash"`
	Notes    string    `form:"notes"`
}

func ListMalware(c echo.Context) error {
	cid, err := strconv.ParseInt(c.Param("cid"), 10, 64)
	if err != nil || cid == 0 {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	search := c.QueryParam("search")
	list, err := model.FindMalware(cid, search)
	if err != nil {
		return err
	}

	return render(c, malware.List(ctx(c), cid, list))
}

func ExportMalware(c echo.Context) error {
	cid, err := strconv.ParseInt(c.Param("cid"), 10, 64)
	if err != nil || cid == 0 {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	list, err := model.ListMalware(cid)
	if err != nil {
		return err
	}

	c.Response().Header().Set("Content-Disposition", "attachment; filename=\"malware.csv\"")
	c.Response().WriteHeader(http.StatusOK)

	w := csv.NewWriter(c.Response().Writer)
	w.Write([]string{"Filename", "Filepath", "Create Date", "Modified Date", "System", "Hash", "Notes"})
	for _, e := range list {
		w.Write([]string{e.Filename, e.Filepath, e.CDate.Format(time.RFC3339), e.MDate.Format(time.RFC3339), e.System, e.Hash, e.Notes})
	}

	w.Flush()
	return err
}

func ImportMalware(c echo.Context) error {
	cid, err := strconv.ParseInt(c.Param("cid"), 10, 64)
	if err != nil || cid == 0 {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	if c.Request().Method == http.MethodGet {
		uri := c.Echo().Reverse("import-malware", cid)
		return render(c, utils.Import(ctx(c), uri))
	}

	now := time.Now()
	usr := getUser(c)

	fh, err := c.FormFile("file")
	if err != nil {
		return err
	}

	fr, err := fh.Open()
	if err != nil {
		return err
	}

	r := csv.NewReader(fr)
	r.FieldsPerRecord = 7
	r.Read() // skip header

	for {
		rec, err := r.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return err
		}

		cdate, err := time.Parse(time.RFC3339, rec[2])
		if err != nil {
			return err
		}

		mdate, err := time.Parse(time.RFC3339, rec[3])
		if err != nil {
			return err
		}

		obj := model.Malware{
			CaseID:       cid,
			Filename:     rec[0],
			Filepath:     rec[1],
			CDate:        cdate, // 2
			MDate:        mdate, // 3
			System:       rec[4],
			Hash:         rec[5],
			Notes:        rec[6],
			DateAdded:    now,
			UserAdded:    usr,
			DateModified: now,
			UserModified: usr,
		}

		_, err = model.SaveMalware(cid, obj)
		if err != nil {
			return err
		}
	}

	return refresh(c)
}

func ViewMalware(c echo.Context) error {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil { // id == 0 is valid in this context
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid malware id")
	}

	cid, err := strconv.ParseInt(c.Param("cid"), 10, 64)
	if err != nil || cid == 0 {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	obj := model.Malware{CaseID: cid}
	if id != 0 {
		obj, err = model.GetMalware(cid, id)
		if err != nil {
			return err
		}
	}

	return render(c, malware.Form(ctx(c), obj))
}

func SaveMalware(c echo.Context) error {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil { // id == 0 is valid in this context
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid malware id")
	}

	cid, err := strconv.ParseInt(c.Param("cid"), 10, 64)
	if err != nil || cid == 0 {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	dto := MalwareDTO{}
	if err = c.Bind(&dto); err != nil {
		return err
	}

	now := time.Now()
	usr := getUser(c)
	obj := model.Malware{
		ID:           id,
		CaseID:       cid,
		Filename:     dto.Filename,
		Filepath:     dto.Filepath,
		CDate:        dto.CDate,
		MDate:        dto.MDate,
		System:       dto.System,
		Hash:         dto.Hash,
		Notes:        dto.Notes,
		DateAdded:    now,
		UserAdded:    usr,
		DateModified: now,
		UserModified: usr,
	}

	if id != 0 {
		src, err := model.GetMalware(cid, id)
		if err != nil {
			return err
		}

		obj.DateAdded = src.DateAdded
		obj.UserAdded = src.UserAdded
	}

	if _, err := model.SaveMalware(cid, obj); err != nil {
		return err
	}

	return refresh(c)
}

func DeleteMalware(c echo.Context) error {
	id, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil || id == 0 {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid malware id")
	}

	cid, err := strconv.ParseInt(c.Param("cid"), 10, 64)
	if err != nil || cid == 0 {
		return echo.NewHTTPError(http.StatusBadRequest, "Please provide a valid case id")
	}

	if c.QueryParam("confirm") != "yes" {
		uri := c.Echo().Reverse("delete-malware", cid, id) + "?confirm=yes"
		return render(c, utils.Confirm(ctx(c), uri))
	}

	err = model.DeleteMalware(cid, id)
	if err != nil {
		return err
	}

	return refresh(c)
}
